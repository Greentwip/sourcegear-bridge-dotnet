// this file is automatically generated with SourceGear Bridge

import jumptable_dotnet;

// System
// System.Numerics
extension System.Numerics {
// type: System.Numerics.Matrix3x2
// boxed value type
public final class Matrix3x2
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Numerics_Matrix3x2_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public static var Identity : dotnet.System.Numerics.Matrix3x2 {
        get {
            return try! get_Identity();
        }
    }
    public var IsIdentity : Bool {
        get {
            return try! get_IsIdentity();
        }
    }
    public var Translation : dotnet.System.Numerics.Vector2 {
        get {
            return try! get_Translation();
        }
        set(v) {
            return try! set_Translation(value: v);
        }
    }
    // .ctor(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
// docid: M:System.Numerics.Matrix3x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
    public init(m11 : Swift.Float, m12 : Swift.Float, m21 : Swift.Float, m22 : Swift.Float, m31 : Swift.Float, m32 : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Matrix3x2_ctor_0__6__f32_f32_f32_f32_f32_f32(&__thrown, m11, m12, m21, m22, m31, m32);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Numerics_Matrix3x2_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Numerics.Matrix3x2 Add(System.Numerics.Matrix3x2, System.Numerics.Matrix3x2)
// docid: M:System.Numerics.Matrix3x2.Add(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)
    public class func Add(value1 : dotnet.System.Numerics.Matrix3x2, value2 : dotnet.System.Numerics.Matrix3x2) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__Add_0__2__Matrix3x2_Matrix3x2(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.Numerics.Matrix3x2 CreateRotation(System.Single)
// docid: M:System.Numerics.Matrix3x2.CreateRotation(System.Single)
    public class func CreateRotation(radians : Swift.Float) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__CreateRotation_0__1__f32(&__thrown, radians);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.Numerics.Matrix3x2 CreateRotation(System.Single, System.Numerics.Vector2)
// docid: M:System.Numerics.Matrix3x2.CreateRotation(System.Single,System.Numerics.Vector2)
    public class func CreateRotation(radians : Swift.Float, centerPoint : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__CreateRotation_0__2__f32_Vector2(&__thrown, radians, centerPoint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.Numerics.Matrix3x2 CreateScale(System.Numerics.Vector2)
// docid: M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2)
    public class func CreateScale(scales : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__CreateScale_0__1__Vector2(&__thrown, scales.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.Numerics.Matrix3x2 CreateScale(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func CreateScale(scales : dotnet.System.Numerics.Vector2, centerPoint : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__CreateScale_0__2__Vector2_Vector2(&__thrown, scales.get_handle(), centerPoint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.Numerics.Matrix3x2 CreateScale(System.Single)
// docid: M:System.Numerics.Matrix3x2.CreateScale(System.Single)
    public class func CreateScale(scale : Swift.Float) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__CreateScale_0__1__f32(&__thrown, scale);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.Numerics.Matrix3x2 CreateScale(System.Single, System.Numerics.Vector2)
// docid: M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Numerics.Vector2)
    public class func CreateScale(scale : Swift.Float, centerPoint : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__CreateScale_0__2__f32_Vector2(&__thrown, scale, centerPoint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.Numerics.Matrix3x2 CreateScale(System.Single, System.Single)
// docid: M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single)
    public class func CreateScale(xScale : Swift.Float, yScale : Swift.Float) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__CreateScale_0__2__f32_f32(&__thrown, xScale, yScale);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.Numerics.Matrix3x2 CreateScale(System.Single, System.Single, System.Numerics.Vector2)
// docid: M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single,System.Numerics.Vector2)
    public class func CreateScale(xScale : Swift.Float, yScale : Swift.Float, centerPoint : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__CreateScale_0__3__f32_f32_Vector2(&__thrown, xScale, yScale, centerPoint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.Numerics.Matrix3x2 CreateSkew(System.Single, System.Single)
// docid: M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single)
    public class func CreateSkew(radiansX : Swift.Float, radiansY : Swift.Float) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__CreateSkew_0__2__f32_f32(&__thrown, radiansX, radiansY);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.Numerics.Matrix3x2 CreateSkew(System.Single, System.Single, System.Numerics.Vector2)
// docid: M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single,System.Numerics.Vector2)
    public class func CreateSkew(radiansX : Swift.Float, radiansY : Swift.Float, centerPoint : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__CreateSkew_0__3__f32_f32_Vector2(&__thrown, radiansX, radiansY, centerPoint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.Numerics.Matrix3x2 CreateTranslation(System.Numerics.Vector2)
// docid: M:System.Numerics.Matrix3x2.CreateTranslation(System.Numerics.Vector2)
    public class func CreateTranslation(position : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__CreateTranslation_0__1__Vector2(&__thrown, position.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.Numerics.Matrix3x2 CreateTranslation(System.Single, System.Single)
// docid: M:System.Numerics.Matrix3x2.CreateTranslation(System.Single,System.Single)
    public class func CreateTranslation(xPosition : Swift.Float, yPosition : Swift.Float) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__CreateTranslation_0__2__f32_f32(&__thrown, xPosition, yPosition);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // bool Equals(System.Numerics.Matrix3x2)
// docid: M:System.Numerics.Matrix3x2.Equals(System.Numerics.Matrix3x2)
    public func Equals(other : dotnet.System.Numerics.Matrix3x2) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_bool__Equals_0__1__Matrix3x2(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Numerics.Matrix3x2.Equals(System.Object)
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Single GetDeterminant()
// docid: M:System.Numerics.Matrix3x2.GetDeterminant
    public func GetDeterminant() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_f32__GetDeterminant_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Numerics.Matrix3x2.GetHashCode
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Invert(System.Numerics.Matrix3x2, ref System.Numerics.Matrix3x2)
// docid: M:System.Numerics.Matrix3x2.Invert(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2@)
    public class func Invert(matrix : dotnet.System.Numerics.Matrix3x2, result : inout Optional<dotnet.System.Numerics.Matrix3x2>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = (result != nil) ? (result!.get_handle()) : nil;
        let __return = System_Numerics_Matrix3x2_bool__Invert_0__2__Matrix3x2_outMatrix3x2(&__thrown, matrix.get_handle(), &_tmp_out_result);
        let __h__tmp2_result = _tmp_out_result;
        let _tmp2_result = (__h__tmp2_result != nil) ? dotnet.System.Numerics.Matrix3x2(hndl: __h__tmp2_result!) : nil;
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Numerics.Matrix3x2 Lerp(System.Numerics.Matrix3x2, System.Numerics.Matrix3x2, System.Single)
// docid: M:System.Numerics.Matrix3x2.Lerp(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2,System.Single)
    public class func Lerp(matrix1 : dotnet.System.Numerics.Matrix3x2, matrix2 : dotnet.System.Numerics.Matrix3x2, amount : Swift.Float) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__Lerp_0__3__Matrix3x2_Matrix3x2_f32(&__thrown, matrix1.get_handle(), matrix2.get_handle(), amount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.Numerics.Matrix3x2 Multiply(System.Numerics.Matrix3x2, System.Numerics.Matrix3x2)
// docid: M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)
    public class func Multiply(value1 : dotnet.System.Numerics.Matrix3x2, value2 : dotnet.System.Numerics.Matrix3x2) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__Multiply_0__2__Matrix3x2_Matrix3x2(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.Numerics.Matrix3x2 Multiply(System.Numerics.Matrix3x2, System.Single)
// docid: M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Single)
    public class func Multiply(value1 : dotnet.System.Numerics.Matrix3x2, value2 : Swift.Float) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__Multiply_0__2__Matrix3x2_f32(&__thrown, value1.get_handle(), value2);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.Numerics.Matrix3x2 Negate(System.Numerics.Matrix3x2)
// docid: M:System.Numerics.Matrix3x2.Negate(System.Numerics.Matrix3x2)
    public class func Negate(value : dotnet.System.Numerics.Matrix3x2) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__Negate_0__1__Matrix3x2(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Matrix3x2 op_Addition(System.Numerics.Matrix3x2, System.Numerics.Matrix3x2)
// docid: M:System.Numerics.Matrix3x2.op_Addition(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)
    public class func op_Addition(value1 : dotnet.System.Numerics.Matrix3x2, value2 : dotnet.System.Numerics.Matrix3x2) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__op_Addition_0__2__Matrix3x2_Matrix3x2(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    public static func + (value1 : dotnet.System.Numerics.Matrix3x2, value2 : dotnet.System.Numerics.Matrix3x2) -> dotnet.System.Numerics.Matrix3x2
    {
        return try! op_Addition(value1: value1, value2: value2);
    }
    // [IsSpecialName] bool op_Equality(System.Numerics.Matrix3x2, System.Numerics.Matrix3x2)
// docid: M:System.Numerics.Matrix3x2.op_Equality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)
    public class func op_Equality(value1 : dotnet.System.Numerics.Matrix3x2, value2 : dotnet.System.Numerics.Matrix3x2) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_bool__op_Equality_0__2__Matrix3x2_Matrix3x2(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    public static func == (value1 : dotnet.System.Numerics.Matrix3x2, value2 : dotnet.System.Numerics.Matrix3x2) -> Bool
    {
        return try! op_Equality(value1: value1, value2: value2);
    }
    // [IsSpecialName] bool op_Inequality(System.Numerics.Matrix3x2, System.Numerics.Matrix3x2)
// docid: M:System.Numerics.Matrix3x2.op_Inequality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)
    public class func op_Inequality(value1 : dotnet.System.Numerics.Matrix3x2, value2 : dotnet.System.Numerics.Matrix3x2) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_bool__op_Inequality_0__2__Matrix3x2_Matrix3x2(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    public static func != (value1 : dotnet.System.Numerics.Matrix3x2, value2 : dotnet.System.Numerics.Matrix3x2) -> Bool
    {
        return try! op_Inequality(value1: value1, value2: value2);
    }
    // [IsSpecialName] System.Numerics.Matrix3x2 op_Multiply(System.Numerics.Matrix3x2, System.Numerics.Matrix3x2)
// docid: M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)
    public class func op_Multiply(value1 : dotnet.System.Numerics.Matrix3x2, value2 : dotnet.System.Numerics.Matrix3x2) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__op_Multiply_0__2__Matrix3x2_Matrix3x2(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    public static func * (value1 : dotnet.System.Numerics.Matrix3x2, value2 : dotnet.System.Numerics.Matrix3x2) -> dotnet.System.Numerics.Matrix3x2
    {
        return try! op_Multiply(value1: value1, value2: value2);
    }
    // [IsSpecialName] System.Numerics.Matrix3x2 op_Multiply(System.Numerics.Matrix3x2, System.Single)
// docid: M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Single)
    public class func op_Multiply(value1 : dotnet.System.Numerics.Matrix3x2, value2 : Swift.Float) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__op_Multiply_0__2__Matrix3x2_f32(&__thrown, value1.get_handle(), value2);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    public static func * (value1 : dotnet.System.Numerics.Matrix3x2, value2 : Swift.Float) -> dotnet.System.Numerics.Matrix3x2
    {
        return try! op_Multiply(value1: value1, value2: value2);
    }
    // [IsSpecialName] System.Numerics.Matrix3x2 op_Subtraction(System.Numerics.Matrix3x2, System.Numerics.Matrix3x2)
// docid: M:System.Numerics.Matrix3x2.op_Subtraction(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)
    public class func op_Subtraction(value1 : dotnet.System.Numerics.Matrix3x2, value2 : dotnet.System.Numerics.Matrix3x2) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__op_Subtraction_0__2__Matrix3x2_Matrix3x2(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    public static func - (value1 : dotnet.System.Numerics.Matrix3x2, value2 : dotnet.System.Numerics.Matrix3x2) -> dotnet.System.Numerics.Matrix3x2
    {
        return try! op_Subtraction(value1: value1, value2: value2);
    }
    // [IsSpecialName] System.Numerics.Matrix3x2 op_UnaryNegation(System.Numerics.Matrix3x2)
// docid: M:System.Numerics.Matrix3x2.op_UnaryNegation(System.Numerics.Matrix3x2)
    public class func op_UnaryNegation(value : dotnet.System.Numerics.Matrix3x2) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__op_UnaryNegation_0__1__Matrix3x2(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.Numerics.Matrix3x2 Subtract(System.Numerics.Matrix3x2, System.Numerics.Matrix3x2)
// docid: M:System.Numerics.Matrix3x2.Subtract(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)
    public class func Subtract(value1 : dotnet.System.Numerics.Matrix3x2, value2 : dotnet.System.Numerics.Matrix3x2) throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__Subtract_0__2__Matrix3x2_Matrix3x2(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Numerics.Matrix3x2.ToString
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Matrix3x2 get_Identity()
// docid: M:System.Numerics.Matrix3x2.get_Identity
    public class func get_Identity() throws -> dotnet.System.Numerics.Matrix3x2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Matrix3x2__get_Identity_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix3x2(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsIdentity()
// docid: M:System.Numerics.Matrix3x2.get_IsIdentity
    public func get_IsIdentity() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_bool__get_IsIdentity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Numerics.Vector2 get_Translation()
// docid: M:System.Numerics.Matrix3x2.get_Translation
    public func get_Translation() throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix3x2_Vector2__get_Translation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Translation(System.Numerics.Vector2)
// docid: M:System.Numerics.Matrix3x2.set_Translation(System.Numerics.Vector2)
    public func set_Translation(value : dotnet.System.Numerics.Vector2) throws {
        var __thrown : NullableHandle = nil;
        System_Numerics_Matrix3x2_void__set_Translation_0__1__Vector2(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // Matrix3x2


// type: System.Numerics.Matrix4x4
// boxed value type
public final class Matrix4x4
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Numerics_Matrix4x4_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public static var Identity : dotnet.System.Numerics.Matrix4x4 {
        get {
            return try! get_Identity();
        }
    }
    public var IsIdentity : Bool {
        get {
            return try! get_IsIdentity();
        }
    }
    public var Translation : dotnet.System.Numerics.Vector3 {
        get {
            return try! get_Translation();
        }
        set(v) {
            return try! set_Translation(value: v);
        }
    }
    // .ctor(System.Numerics.Matrix3x2)
// docid: M:System.Numerics.Matrix4x4.#ctor(System.Numerics.Matrix3x2)
    public init(value : dotnet.System.Numerics.Matrix3x2) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Matrix4x4_ctor_0__1__Matrix3x2(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
// docid: M:System.Numerics.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
    public init(m11 : Swift.Float, m12 : Swift.Float, m13 : Swift.Float, m14 : Swift.Float, m21 : Swift.Float, m22 : Swift.Float, m23 : Swift.Float, m24 : Swift.Float, m31 : Swift.Float, m32 : Swift.Float, m33 : Swift.Float, m34 : Swift.Float, m41 : Swift.Float, m42 : Swift.Float, m43 : Swift.Float, m44 : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Matrix4x4_ctor_0__16__f32_f32_f32_f32_f32_f32_f32_f32_f32_f32_f32_f32_f32_f32_f32_f32(&__thrown, m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Numerics_Matrix4x4_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Numerics.Matrix4x4 Add(System.Numerics.Matrix4x4, System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Matrix4x4.Add(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)
    public class func Add(value1 : dotnet.System.Numerics.Matrix4x4, value2 : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__Add_0__2__Matrix4x4_Matrix4x4(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateBillboard(System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Matrix4x4.CreateBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
    public class func CreateBillboard(objectPosition : dotnet.System.Numerics.Vector3, cameraPosition : dotnet.System.Numerics.Vector3, cameraUpVector : dotnet.System.Numerics.Vector3, cameraForwardVector : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateBillboard_0__4__Vector3_Vector3_Vector3_Vector3(&__thrown, objectPosition.get_handle(), cameraPosition.get_handle(), cameraUpVector.get_handle(), cameraForwardVector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateConstrainedBillboard(System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Matrix4x4.CreateConstrainedBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
    public class func CreateConstrainedBillboard(objectPosition : dotnet.System.Numerics.Vector3, cameraPosition : dotnet.System.Numerics.Vector3, rotateAxis : dotnet.System.Numerics.Vector3, cameraForwardVector : dotnet.System.Numerics.Vector3, objectForwardVector : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateConstrainedBillboard_0__5__Vector3_Vector3_Vector3_Vector3_Vector3(&__thrown, objectPosition.get_handle(), cameraPosition.get_handle(), rotateAxis.get_handle(), cameraForwardVector.get_handle(), objectForwardVector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateFromAxisAngle(System.Numerics.Vector3, System.Single)
// docid: M:System.Numerics.Matrix4x4.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)
    public class func CreateFromAxisAngle(axis : dotnet.System.Numerics.Vector3, angle : Swift.Float) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateFromAxisAngle_0__2__Vector3_f32(&__thrown, axis.get_handle(), angle);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateFromQuaternion(System.Numerics.Quaternion)
// docid: M:System.Numerics.Matrix4x4.CreateFromQuaternion(System.Numerics.Quaternion)
    public class func CreateFromQuaternion(quaternion : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateFromQuaternion_0__1__Quaternion(&__thrown, quaternion.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateFromYawPitchRoll(System.Single, System.Single, System.Single)
// docid: M:System.Numerics.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
    public class func CreateFromYawPitchRoll(yaw : Swift.Float, pitch : Swift.Float, roll : Swift.Float) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateFromYawPitchRoll_0__3__f32_f32_f32(&__thrown, yaw, pitch, roll);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateLookAt(System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Matrix4x4.CreateLookAt(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
    public class func CreateLookAt(cameraPosition : dotnet.System.Numerics.Vector3, cameraTarget : dotnet.System.Numerics.Vector3, cameraUpVector : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateLookAt_0__3__Vector3_Vector3_Vector3(&__thrown, cameraPosition.get_handle(), cameraTarget.get_handle(), cameraUpVector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateOrthographic(System.Single, System.Single, System.Single, System.Single)
// docid: M:System.Numerics.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)
    public class func CreateOrthographic(width : Swift.Float, height : Swift.Float, zNearPlane : Swift.Float, zFarPlane : Swift.Float) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateOrthographic_0__4__f32_f32_f32_f32(&__thrown, width, height, zNearPlane, zFarPlane);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateOrthographicOffCenter(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
// docid: M:System.Numerics.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
    public class func CreateOrthographicOffCenter(left : Swift.Float, right : Swift.Float, bottom : Swift.Float, top : Swift.Float, zNearPlane : Swift.Float, zFarPlane : Swift.Float) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateOrthographicOffCenter_0__6__f32_f32_f32_f32_f32_f32(&__thrown, left, right, bottom, top, zNearPlane, zFarPlane);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreatePerspective(System.Single, System.Single, System.Single, System.Single)
// docid: M:System.Numerics.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)
    public class func CreatePerspective(width : Swift.Float, height : Swift.Float, nearPlaneDistance : Swift.Float, farPlaneDistance : Swift.Float) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreatePerspective_0__4__f32_f32_f32_f32(&__thrown, width, height, nearPlaneDistance, farPlaneDistance);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreatePerspectiveFieldOfView(System.Single, System.Single, System.Single, System.Single)
// docid: M:System.Numerics.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)
    public class func CreatePerspectiveFieldOfView(fieldOfView : Swift.Float, aspectRatio : Swift.Float, nearPlaneDistance : Swift.Float, farPlaneDistance : Swift.Float) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreatePerspectiveFieldOfView_0__4__f32_f32_f32_f32(&__thrown, fieldOfView, aspectRatio, nearPlaneDistance, farPlaneDistance);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreatePerspectiveOffCenter(System.Single, System.Single, System.Single, System.Single, System.Single, System.Single)
// docid: M:System.Numerics.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
    public class func CreatePerspectiveOffCenter(left : Swift.Float, right : Swift.Float, bottom : Swift.Float, top : Swift.Float, nearPlaneDistance : Swift.Float, farPlaneDistance : Swift.Float) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreatePerspectiveOffCenter_0__6__f32_f32_f32_f32_f32_f32(&__thrown, left, right, bottom, top, nearPlaneDistance, farPlaneDistance);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateReflection(System.Numerics.Plane)
// docid: M:System.Numerics.Matrix4x4.CreateReflection(System.Numerics.Plane)
    public class func CreateReflection(value : dotnet.System.Numerics.Plane) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateReflection_0__1__Plane(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateRotationX(System.Single)
// docid: M:System.Numerics.Matrix4x4.CreateRotationX(System.Single)
    public class func CreateRotationX(radians : Swift.Float) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateRotationX_0__1__f32(&__thrown, radians);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateRotationX(System.Single, System.Numerics.Vector3)
// docid: M:System.Numerics.Matrix4x4.CreateRotationX(System.Single,System.Numerics.Vector3)
    public class func CreateRotationX(radians : Swift.Float, centerPoint : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateRotationX_0__2__f32_Vector3(&__thrown, radians, centerPoint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateRotationY(System.Single)
// docid: M:System.Numerics.Matrix4x4.CreateRotationY(System.Single)
    public class func CreateRotationY(radians : Swift.Float) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateRotationY_0__1__f32(&__thrown, radians);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateRotationY(System.Single, System.Numerics.Vector3)
// docid: M:System.Numerics.Matrix4x4.CreateRotationY(System.Single,System.Numerics.Vector3)
    public class func CreateRotationY(radians : Swift.Float, centerPoint : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateRotationY_0__2__f32_Vector3(&__thrown, radians, centerPoint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateRotationZ(System.Single)
// docid: M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single)
    public class func CreateRotationZ(radians : Swift.Float) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateRotationZ_0__1__f32(&__thrown, radians);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateRotationZ(System.Single, System.Numerics.Vector3)
// docid: M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single,System.Numerics.Vector3)
    public class func CreateRotationZ(radians : Swift.Float, centerPoint : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateRotationZ_0__2__f32_Vector3(&__thrown, radians, centerPoint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateScale(System.Numerics.Vector3)
// docid: M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3)
    public class func CreateScale(scales : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateScale_0__1__Vector3(&__thrown, scales.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateScale(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func CreateScale(scales : dotnet.System.Numerics.Vector3, centerPoint : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateScale_0__2__Vector3_Vector3(&__thrown, scales.get_handle(), centerPoint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateScale(System.Single)
// docid: M:System.Numerics.Matrix4x4.CreateScale(System.Single)
    public class func CreateScale(scale : Swift.Float) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateScale_0__1__f32(&__thrown, scale);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateScale(System.Single, System.Numerics.Vector3)
// docid: M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Numerics.Vector3)
    public class func CreateScale(scale : Swift.Float, centerPoint : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateScale_0__2__f32_Vector3(&__thrown, scale, centerPoint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateScale(System.Single, System.Single, System.Single)
// docid: M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single)
    public class func CreateScale(xScale : Swift.Float, yScale : Swift.Float, zScale : Swift.Float) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateScale_0__3__f32_f32_f32(&__thrown, xScale, yScale, zScale);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateScale(System.Single, System.Single, System.Single, System.Numerics.Vector3)
// docid: M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,System.Numerics.Vector3)
    public class func CreateScale(xScale : Swift.Float, yScale : Swift.Float, zScale : Swift.Float, centerPoint : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateScale_0__4__f32_f32_f32_Vector3(&__thrown, xScale, yScale, zScale, centerPoint.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateShadow(System.Numerics.Vector3, System.Numerics.Plane)
// docid: M:System.Numerics.Matrix4x4.CreateShadow(System.Numerics.Vector3,System.Numerics.Plane)
    public class func CreateShadow(lightDirection : dotnet.System.Numerics.Vector3, plane : dotnet.System.Numerics.Plane) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateShadow_0__2__Vector3_Plane(&__thrown, lightDirection.get_handle(), plane.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateTranslation(System.Numerics.Vector3)
// docid: M:System.Numerics.Matrix4x4.CreateTranslation(System.Numerics.Vector3)
    public class func CreateTranslation(position : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateTranslation_0__1__Vector3(&__thrown, position.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateTranslation(System.Single, System.Single, System.Single)
// docid: M:System.Numerics.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single)
    public class func CreateTranslation(xPosition : Swift.Float, yPosition : Swift.Float, zPosition : Swift.Float) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateTranslation_0__3__f32_f32_f32(&__thrown, xPosition, yPosition, zPosition);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 CreateWorld(System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Matrix4x4.CreateWorld(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
    public class func CreateWorld(position : dotnet.System.Numerics.Vector3, forward : dotnet.System.Numerics.Vector3, up : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__CreateWorld_0__3__Vector3_Vector3_Vector3(&__thrown, position.get_handle(), forward.get_handle(), up.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // bool Decompose(System.Numerics.Matrix4x4, ref System.Numerics.Vector3, ref System.Numerics.Quaternion, ref System.Numerics.Vector3)
// docid: M:System.Numerics.Matrix4x4.Decompose(System.Numerics.Matrix4x4,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@)
    public class func Decompose(matrix : dotnet.System.Numerics.Matrix4x4, scale : inout Optional<dotnet.System.Numerics.Vector3>, rotation : inout Optional<dotnet.System.Numerics.Quaternion>, translation : inout Optional<dotnet.System.Numerics.Vector3>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_scale = (scale != nil) ? (scale!.get_handle()) : nil;
            var _tmp_out_rotation = (rotation != nil) ? (rotation!.get_handle()) : nil;
            var _tmp_out_translation = (translation != nil) ? (translation!.get_handle()) : nil;
        let __return = System_Numerics_Matrix4x4_bool__Decompose_0__4__Matrix4x4_outVector3_outQuaternion_outVector3(&__thrown, matrix.get_handle(), &_tmp_out_scale, &_tmp_out_rotation, &_tmp_out_translation);
        let __h__tmp2_scale = _tmp_out_scale;
        let _tmp2_scale = (__h__tmp2_scale != nil) ? dotnet.System.Numerics.Vector3(hndl: __h__tmp2_scale!) : nil;
            scale = _tmp2_scale;
        let __h__tmp2_rotation = _tmp_out_rotation;
        let _tmp2_rotation = (__h__tmp2_rotation != nil) ? dotnet.System.Numerics.Quaternion(hndl: __h__tmp2_rotation!) : nil;
            rotation = _tmp2_rotation;
        let __h__tmp2_translation = _tmp_out_translation;
        let _tmp2_translation = (__h__tmp2_translation != nil) ? dotnet.System.Numerics.Vector3(hndl: __h__tmp2_translation!) : nil;
            translation = _tmp2_translation;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Matrix4x4.Equals(System.Numerics.Matrix4x4)
    public func Equals(other : dotnet.System.Numerics.Matrix4x4) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_bool__Equals_0__1__Matrix4x4(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Numerics.Matrix4x4.Equals(System.Object)
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Single GetDeterminant()
// docid: M:System.Numerics.Matrix4x4.GetDeterminant
    public func GetDeterminant() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_f32__GetDeterminant_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Numerics.Matrix4x4.GetHashCode
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Invert(System.Numerics.Matrix4x4, ref System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Matrix4x4.Invert(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4@)
    public class func Invert(matrix : dotnet.System.Numerics.Matrix4x4, result : inout Optional<dotnet.System.Numerics.Matrix4x4>) throws -> Bool {
        var __thrown : NullableHandle = nil;
            var _tmp_out_result = (result != nil) ? (result!.get_handle()) : nil;
        let __return = System_Numerics_Matrix4x4_bool__Invert_0__2__Matrix4x4_outMatrix4x4(&__thrown, matrix.get_handle(), &_tmp_out_result);
        let __h__tmp2_result = _tmp_out_result;
        let _tmp2_result = (__h__tmp2_result != nil) ? dotnet.System.Numerics.Matrix4x4(hndl: __h__tmp2_result!) : nil;
            result = _tmp2_result;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Numerics.Matrix4x4 Lerp(System.Numerics.Matrix4x4, System.Numerics.Matrix4x4, System.Single)
// docid: M:System.Numerics.Matrix4x4.Lerp(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Single)
    public class func Lerp(matrix1 : dotnet.System.Numerics.Matrix4x4, matrix2 : dotnet.System.Numerics.Matrix4x4, amount : Swift.Float) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__Lerp_0__3__Matrix4x4_Matrix4x4_f32(&__thrown, matrix1.get_handle(), matrix2.get_handle(), amount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 Multiply(System.Numerics.Matrix4x4, System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)
    public class func Multiply(value1 : dotnet.System.Numerics.Matrix4x4, value2 : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__Multiply_0__2__Matrix4x4_Matrix4x4(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 Multiply(System.Numerics.Matrix4x4, System.Single)
// docid: M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Single)
    public class func Multiply(value1 : dotnet.System.Numerics.Matrix4x4, value2 : Swift.Float) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__Multiply_0__2__Matrix4x4_f32(&__thrown, value1.get_handle(), value2);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 Negate(System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Matrix4x4.Negate(System.Numerics.Matrix4x4)
    public class func Negate(value : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__Negate_0__1__Matrix4x4(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Matrix4x4 op_Addition(System.Numerics.Matrix4x4, System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Matrix4x4.op_Addition(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)
    public class func op_Addition(value1 : dotnet.System.Numerics.Matrix4x4, value2 : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__op_Addition_0__2__Matrix4x4_Matrix4x4(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    public static func + (value1 : dotnet.System.Numerics.Matrix4x4, value2 : dotnet.System.Numerics.Matrix4x4) -> dotnet.System.Numerics.Matrix4x4
    {
        return try! op_Addition(value1: value1, value2: value2);
    }
    // [IsSpecialName] bool op_Equality(System.Numerics.Matrix4x4, System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Matrix4x4.op_Equality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)
    public class func op_Equality(value1 : dotnet.System.Numerics.Matrix4x4, value2 : dotnet.System.Numerics.Matrix4x4) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_bool__op_Equality_0__2__Matrix4x4_Matrix4x4(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    public static func == (value1 : dotnet.System.Numerics.Matrix4x4, value2 : dotnet.System.Numerics.Matrix4x4) -> Bool
    {
        return try! op_Equality(value1: value1, value2: value2);
    }
    // [IsSpecialName] bool op_Inequality(System.Numerics.Matrix4x4, System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Matrix4x4.op_Inequality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)
    public class func op_Inequality(value1 : dotnet.System.Numerics.Matrix4x4, value2 : dotnet.System.Numerics.Matrix4x4) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_bool__op_Inequality_0__2__Matrix4x4_Matrix4x4(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    public static func != (value1 : dotnet.System.Numerics.Matrix4x4, value2 : dotnet.System.Numerics.Matrix4x4) -> Bool
    {
        return try! op_Inequality(value1: value1, value2: value2);
    }
    // [IsSpecialName] System.Numerics.Matrix4x4 op_Multiply(System.Numerics.Matrix4x4, System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)
    public class func op_Multiply(value1 : dotnet.System.Numerics.Matrix4x4, value2 : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__op_Multiply_0__2__Matrix4x4_Matrix4x4(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    public static func * (value1 : dotnet.System.Numerics.Matrix4x4, value2 : dotnet.System.Numerics.Matrix4x4) -> dotnet.System.Numerics.Matrix4x4
    {
        return try! op_Multiply(value1: value1, value2: value2);
    }
    // [IsSpecialName] System.Numerics.Matrix4x4 op_Multiply(System.Numerics.Matrix4x4, System.Single)
// docid: M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Single)
    public class func op_Multiply(value1 : dotnet.System.Numerics.Matrix4x4, value2 : Swift.Float) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__op_Multiply_0__2__Matrix4x4_f32(&__thrown, value1.get_handle(), value2);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    public static func * (value1 : dotnet.System.Numerics.Matrix4x4, value2 : Swift.Float) -> dotnet.System.Numerics.Matrix4x4
    {
        return try! op_Multiply(value1: value1, value2: value2);
    }
    // [IsSpecialName] System.Numerics.Matrix4x4 op_Subtraction(System.Numerics.Matrix4x4, System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Matrix4x4.op_Subtraction(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)
    public class func op_Subtraction(value1 : dotnet.System.Numerics.Matrix4x4, value2 : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__op_Subtraction_0__2__Matrix4x4_Matrix4x4(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    public static func - (value1 : dotnet.System.Numerics.Matrix4x4, value2 : dotnet.System.Numerics.Matrix4x4) -> dotnet.System.Numerics.Matrix4x4
    {
        return try! op_Subtraction(value1: value1, value2: value2);
    }
    // [IsSpecialName] System.Numerics.Matrix4x4 op_UnaryNegation(System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Matrix4x4.op_UnaryNegation(System.Numerics.Matrix4x4)
    public class func op_UnaryNegation(value : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__op_UnaryNegation_0__1__Matrix4x4(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 Subtract(System.Numerics.Matrix4x4, System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Matrix4x4.Subtract(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)
    public class func Subtract(value1 : dotnet.System.Numerics.Matrix4x4, value2 : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__Subtract_0__2__Matrix4x4_Matrix4x4(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Numerics.Matrix4x4.ToString
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 Transform(System.Numerics.Matrix4x4, System.Numerics.Quaternion)
// docid: M:System.Numerics.Matrix4x4.Transform(System.Numerics.Matrix4x4,System.Numerics.Quaternion)
    public class func Transform(value : dotnet.System.Numerics.Matrix4x4, rotation : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__Transform_0__2__Matrix4x4_Quaternion(&__thrown, value.get_handle(), rotation.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // System.Numerics.Matrix4x4 Transpose(System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Matrix4x4.Transpose(System.Numerics.Matrix4x4)
    public class func Transpose(matrix : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__Transpose_0__1__Matrix4x4(&__thrown, matrix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Matrix4x4 get_Identity()
// docid: M:System.Numerics.Matrix4x4.get_Identity
    public class func get_Identity() throws -> dotnet.System.Numerics.Matrix4x4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Matrix4x4__get_Identity_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Matrix4x4(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsIdentity()
// docid: M:System.Numerics.Matrix4x4.get_IsIdentity
    public func get_IsIdentity() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_bool__get_IsIdentity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // [IsSpecialName] System.Numerics.Vector3 get_Translation()
// docid: M:System.Numerics.Matrix4x4.get_Translation
    public func get_Translation() throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Matrix4x4_Vector3__get_Translation_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // [IsSpecialName] void set_Translation(System.Numerics.Vector3)
// docid: M:System.Numerics.Matrix4x4.set_Translation(System.Numerics.Vector3)
    public func set_Translation(value : dotnet.System.Numerics.Vector3) throws {
        var __thrown : NullableHandle = nil;
        System_Numerics_Matrix4x4_void__set_Translation_0__1__Vector3(&__thrown, self.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
} // Matrix4x4


// type: System.Numerics.Plane
// boxed value type
public final class Plane
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Numerics_Plane_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    // .ctor(System.Numerics.Vector3, System.Single)
// docid: M:System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)
    public init(normal : dotnet.System.Numerics.Vector3, d : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Plane_ctor_0__2__Vector3_f32(&__thrown, normal.get_handle(), d);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Numerics.Vector4)
// docid: M:System.Numerics.Plane.#ctor(System.Numerics.Vector4)
    public init(value : dotnet.System.Numerics.Vector4) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Plane_ctor_0__1__Vector4(&__thrown, value.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Single, System.Single, System.Single, System.Single)
// docid: M:System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)
    public init(x : Swift.Float, y : Swift.Float, z : Swift.Float, d : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Plane_ctor_0__4__f32_f32_f32_f32(&__thrown, x, y, z, d);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Numerics_Plane_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Numerics.Plane CreateFromVertices(System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
    public class func CreateFromVertices(point1 : dotnet.System.Numerics.Vector3, point2 : dotnet.System.Numerics.Vector3, point3 : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Plane {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Plane_Plane__CreateFromVertices_0__3__Vector3_Vector3_Vector3(&__thrown, point1.get_handle(), point2.get_handle(), point3.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Plane(hndl : __return);
        }
    }
    // System.Single Dot(System.Numerics.Plane, System.Numerics.Vector4)
// docid: M:System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)
    public class func Dot(plane : dotnet.System.Numerics.Plane, value : dotnet.System.Numerics.Vector4) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Plane_f32__Dot_0__2__Plane_Vector4(&__thrown, plane.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single DotCoordinate(System.Numerics.Plane, System.Numerics.Vector3)
// docid: M:System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)
    public class func DotCoordinate(plane : dotnet.System.Numerics.Plane, value : dotnet.System.Numerics.Vector3) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Plane_f32__DotCoordinate_0__2__Plane_Vector3(&__thrown, plane.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single DotNormal(System.Numerics.Plane, System.Numerics.Vector3)
// docid: M:System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)
    public class func DotNormal(plane : dotnet.System.Numerics.Plane, value : dotnet.System.Numerics.Vector3) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Plane_f32__DotNormal_0__2__Plane_Vector3(&__thrown, plane.get_handle(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Equals(System.Numerics.Plane)
// docid: M:System.Numerics.Plane.Equals(System.Numerics.Plane)
    public func Equals(other : dotnet.System.Numerics.Plane) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Plane_bool__Equals_0__1__Plane(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Numerics.Plane.Equals(System.Object)
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Plane_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Numerics.Plane.GetHashCode
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Plane_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Numerics.Plane Normalize(System.Numerics.Plane)
// docid: M:System.Numerics.Plane.Normalize(System.Numerics.Plane)
    public class func Normalize(value : dotnet.System.Numerics.Plane) throws -> dotnet.System.Numerics.Plane {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Plane_Plane__Normalize_0__1__Plane(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Plane(hndl : __return);
        }
    }
    // [IsSpecialName] bool op_Equality(System.Numerics.Plane, System.Numerics.Plane)
// docid: M:System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)
    public class func op_Equality(value1 : dotnet.System.Numerics.Plane, value2 : dotnet.System.Numerics.Plane) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Plane_bool__op_Equality_0__2__Plane_Plane(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    public static func == (value1 : dotnet.System.Numerics.Plane, value2 : dotnet.System.Numerics.Plane) -> Bool
    {
        return try! op_Equality(value1: value1, value2: value2);
    }
    // [IsSpecialName] bool op_Inequality(System.Numerics.Plane, System.Numerics.Plane)
// docid: M:System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)
    public class func op_Inequality(value1 : dotnet.System.Numerics.Plane, value2 : dotnet.System.Numerics.Plane) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Plane_bool__op_Inequality_0__2__Plane_Plane(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    public static func != (value1 : dotnet.System.Numerics.Plane, value2 : dotnet.System.Numerics.Plane) -> Bool
    {
        return try! op_Inequality(value1: value1, value2: value2);
    }
    // System.String ToString()
// docid: M:System.Numerics.Plane.ToString
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Plane_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Numerics.Plane Transform(System.Numerics.Plane, System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)
    public class func Transform(plane : dotnet.System.Numerics.Plane, matrix : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Plane {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Plane_Plane__Transform_0__2__Plane_Matrix4x4(&__thrown, plane.get_handle(), matrix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Plane(hndl : __return);
        }
    }
    // System.Numerics.Plane Transform(System.Numerics.Plane, System.Numerics.Quaternion)
// docid: M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)
    public class func Transform(plane : dotnet.System.Numerics.Plane, rotation : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Plane {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Plane_Plane__Transform_0__2__Plane_Quaternion(&__thrown, plane.get_handle(), rotation.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Plane(hndl : __return);
        }
    }
} // Plane


// type: System.Numerics.Quaternion
// boxed value type
public final class Quaternion
    :
    dotnet.System.Object
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Numerics_Quaternion_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public static var Identity : dotnet.System.Numerics.Quaternion {
        get {
            return try! get_Identity();
        }
    }
    public var IsIdentity : Bool {
        get {
            return try! get_IsIdentity();
        }
    }
    // .ctor(System.Numerics.Vector3, System.Single)
// docid: M:System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)
    public init(vectorPart : dotnet.System.Numerics.Vector3, scalarPart : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Quaternion_ctor_0__2__Vector3_f32(&__thrown, vectorPart.get_handle(), scalarPart);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Single, System.Single, System.Single, System.Single)
// docid: M:System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)
    public init(x : Swift.Float, y : Swift.Float, z : Swift.Float, w : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Quaternion_ctor_0__4__f32_f32_f32_f32(&__thrown, x, y, z, w);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Numerics_Quaternion_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Numerics.Quaternion Add(System.Numerics.Quaternion, System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)
    public class func Add(value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__Add_0__2__Quaternion_Quaternion(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // System.Numerics.Quaternion Concatenate(System.Numerics.Quaternion, System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)
    public class func Concatenate(value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__Concatenate_0__2__Quaternion_Quaternion(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // System.Numerics.Quaternion Conjugate(System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)
    public class func Conjugate(value : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__Conjugate_0__1__Quaternion(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // System.Numerics.Quaternion CreateFromAxisAngle(System.Numerics.Vector3, System.Single)
// docid: M:System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)
    public class func CreateFromAxisAngle(axis : dotnet.System.Numerics.Vector3, angle : Swift.Float) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__CreateFromAxisAngle_0__2__Vector3_f32(&__thrown, axis.get_handle(), angle);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // System.Numerics.Quaternion CreateFromRotationMatrix(System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)
    public class func CreateFromRotationMatrix(matrix : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__CreateFromRotationMatrix_0__1__Matrix4x4(&__thrown, matrix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // System.Numerics.Quaternion CreateFromYawPitchRoll(System.Single, System.Single, System.Single)
// docid: M:System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)
    public class func CreateFromYawPitchRoll(yaw : Swift.Float, pitch : Swift.Float, roll : Swift.Float) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__CreateFromYawPitchRoll_0__3__f32_f32_f32(&__thrown, yaw, pitch, roll);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // System.Numerics.Quaternion Divide(System.Numerics.Quaternion, System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)
    public class func Divide(value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__Divide_0__2__Quaternion_Quaternion(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // System.Single Dot(System.Numerics.Quaternion, System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)
    public class func Dot(quaternion1 : dotnet.System.Numerics.Quaternion, quaternion2 : dotnet.System.Numerics.Quaternion) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_f32__Dot_0__2__Quaternion_Quaternion(&__thrown, quaternion1.get_handle(), quaternion2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Equals(System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)
    public func Equals(other : dotnet.System.Numerics.Quaternion) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_bool__Equals_0__1__Quaternion(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Numerics.Quaternion.Equals(System.Object)
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Numerics.Quaternion.GetHashCode
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Numerics.Quaternion Inverse(System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)
    public class func Inverse(value : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__Inverse_0__1__Quaternion(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // System.Single Length()
// docid: M:System.Numerics.Quaternion.Length
    public func Length() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_f32__Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single LengthSquared()
// docid: M:System.Numerics.Quaternion.LengthSquared
    public func LengthSquared() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_f32__LengthSquared_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Numerics.Quaternion Lerp(System.Numerics.Quaternion, System.Numerics.Quaternion, System.Single)
// docid: M:System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)
    public class func Lerp(quaternion1 : dotnet.System.Numerics.Quaternion, quaternion2 : dotnet.System.Numerics.Quaternion, amount : Swift.Float) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__Lerp_0__3__Quaternion_Quaternion_f32(&__thrown, quaternion1.get_handle(), quaternion2.get_handle(), amount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // System.Numerics.Quaternion Multiply(System.Numerics.Quaternion, System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)
    public class func Multiply(value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__Multiply_0__2__Quaternion_Quaternion(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // System.Numerics.Quaternion Multiply(System.Numerics.Quaternion, System.Single)
// docid: M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)
    public class func Multiply(value1 : dotnet.System.Numerics.Quaternion, value2 : Swift.Float) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__Multiply_0__2__Quaternion_f32(&__thrown, value1.get_handle(), value2);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // System.Numerics.Quaternion Negate(System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)
    public class func Negate(value : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__Negate_0__1__Quaternion(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // System.Numerics.Quaternion Normalize(System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)
    public class func Normalize(value : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__Normalize_0__1__Quaternion(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Quaternion op_Addition(System.Numerics.Quaternion, System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)
    public class func op_Addition(value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__op_Addition_0__2__Quaternion_Quaternion(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    public static func + (value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) -> dotnet.System.Numerics.Quaternion
    {
        return try! op_Addition(value1: value1, value2: value2);
    }
    // [IsSpecialName] System.Numerics.Quaternion op_Division(System.Numerics.Quaternion, System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)
    public class func op_Division(value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__op_Division_0__2__Quaternion_Quaternion(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    public static func / (value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) -> dotnet.System.Numerics.Quaternion
    {
        return try! op_Division(value1: value1, value2: value2);
    }
    // [IsSpecialName] bool op_Equality(System.Numerics.Quaternion, System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)
    public class func op_Equality(value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_bool__op_Equality_0__2__Quaternion_Quaternion(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    public static func == (value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) -> Bool
    {
        return try! op_Equality(value1: value1, value2: value2);
    }
    // [IsSpecialName] bool op_Inequality(System.Numerics.Quaternion, System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)
    public class func op_Inequality(value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_bool__op_Inequality_0__2__Quaternion_Quaternion(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    public static func != (value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) -> Bool
    {
        return try! op_Inequality(value1: value1, value2: value2);
    }
    // [IsSpecialName] System.Numerics.Quaternion op_Multiply(System.Numerics.Quaternion, System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)
    public class func op_Multiply(value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__op_Multiply_0__2__Quaternion_Quaternion(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    public static func * (value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) -> dotnet.System.Numerics.Quaternion
    {
        return try! op_Multiply(value1: value1, value2: value2);
    }
    // [IsSpecialName] System.Numerics.Quaternion op_Multiply(System.Numerics.Quaternion, System.Single)
// docid: M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)
    public class func op_Multiply(value1 : dotnet.System.Numerics.Quaternion, value2 : Swift.Float) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__op_Multiply_0__2__Quaternion_f32(&__thrown, value1.get_handle(), value2);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    public static func * (value1 : dotnet.System.Numerics.Quaternion, value2 : Swift.Float) -> dotnet.System.Numerics.Quaternion
    {
        return try! op_Multiply(value1: value1, value2: value2);
    }
    // [IsSpecialName] System.Numerics.Quaternion op_Subtraction(System.Numerics.Quaternion, System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)
    public class func op_Subtraction(value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__op_Subtraction_0__2__Quaternion_Quaternion(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    public static func - (value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) -> dotnet.System.Numerics.Quaternion
    {
        return try! op_Subtraction(value1: value1, value2: value2);
    }
    // [IsSpecialName] System.Numerics.Quaternion op_UnaryNegation(System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)
    public class func op_UnaryNegation(value : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__op_UnaryNegation_0__1__Quaternion(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // System.Numerics.Quaternion Slerp(System.Numerics.Quaternion, System.Numerics.Quaternion, System.Single)
// docid: M:System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)
    public class func Slerp(quaternion1 : dotnet.System.Numerics.Quaternion, quaternion2 : dotnet.System.Numerics.Quaternion, amount : Swift.Float) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__Slerp_0__3__Quaternion_Quaternion_f32(&__thrown, quaternion1.get_handle(), quaternion2.get_handle(), amount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // System.Numerics.Quaternion Subtract(System.Numerics.Quaternion, System.Numerics.Quaternion)
// docid: M:System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)
    public class func Subtract(value1 : dotnet.System.Numerics.Quaternion, value2 : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__Subtract_0__2__Quaternion_Quaternion(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Numerics.Quaternion.ToString
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Quaternion get_Identity()
// docid: M:System.Numerics.Quaternion.get_Identity
    public class func get_Identity() throws -> dotnet.System.Numerics.Quaternion {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_Quaternion__get_Identity_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Quaternion(hndl : __return);
        }
    }
    // [IsSpecialName] bool get_IsIdentity()
// docid: M:System.Numerics.Quaternion.get_IsIdentity
    public func get_IsIdentity() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Quaternion_bool__get_IsIdentity_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
} // Quaternion


// type: System.Numerics.Vector
public struct Vector {
    // System.Numerics.Vector<T> Abs<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})
    public static func Abs<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___Abs_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> Add<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func Add<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___Add_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> AndNot<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func AndNot<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___AndNot_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO COPE (write_all_methods) (unused generic param) System.Numerics.Vector<TTo> As<TFrom, TTo>(System.Numerics.Vector<TFrom>)
    // System.Numerics.Vector<System.Byte> AsVectorByte<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})
    public static func AsVectorByte<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_u8___AsVectorByte_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Double> AsVectorDouble<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})
    public static func AsVectorDouble<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_f64___AsVectorDouble_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int16> AsVectorInt16<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})
    public static func AsVectorInt16<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int16> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i16___AsVectorInt16_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int32> AsVectorInt32<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})
    public static func AsVectorInt32<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i32___AsVectorInt32_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int64> AsVectorInt64<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})
    public static func AsVectorInt64<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i64___AsVectorInt64_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.IntPtr> AsVectorNInt<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.AsVectorNInt``1(System.Numerics.Vector{``0})
    public static func AsVectorNInt<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<dotnet.System.IntPtr> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_System_IntPtr___AsVectorNInt_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.UIntPtr> AsVectorNUInt<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.AsVectorNUInt``1(System.Numerics.Vector{``0})
    public static func AsVectorNUInt<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<dotnet.System.UIntPtr> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_System_UIntPtr___AsVectorNUInt_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.SByte> AsVectorSByte<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})
    public static func AsVectorSByte<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i8___AsVectorSByte_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Single> AsVectorSingle<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})
    public static func AsVectorSingle<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<Swift.Float> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_f32___AsVectorSingle_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.UInt16> AsVectorUInt16<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})
    public static func AsVectorUInt16<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<Swift.UInt16> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_u16___AsVectorUInt16_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.UInt32> AsVectorUInt32<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})
    public static func AsVectorUInt32<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<Swift.UInt32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_u32___AsVectorUInt32_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.UInt64> AsVectorUInt64<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})
    public static func AsVectorUInt64<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<Swift.UInt64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_u64___AsVectorUInt64_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> BitwiseAnd<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func BitwiseAnd<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___BitwiseAnd_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> BitwiseOr<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func BitwiseOr<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___BitwiseOr_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Double> Ceiling(System.Numerics.Vector<System.Double>)
// docid: M:System.Numerics.Vector.Ceiling(System.Numerics.Vector{System.Double})
    public static func Ceiling(value : dotnet.System.Numerics.Vector_1<Swift.Double>) throws -> dotnet.System.Numerics.Vector_1<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_f64___Ceiling_0__1__System_Numerics_Vector_f64_(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Single> Ceiling(System.Numerics.Vector<System.Single>)
// docid: M:System.Numerics.Vector.Ceiling(System.Numerics.Vector{System.Single})
    public static func Ceiling(value : dotnet.System.Numerics.Vector_1<Swift.Float>) throws -> dotnet.System.Numerics.Vector_1<Swift.Float> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_f32___Ceiling_0__1__System_Numerics_Vector_f32_(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Single> ConditionalSelect(System.Numerics.Vector<System.Int32>, System.Numerics.Vector<System.Single>, System.Numerics.Vector<System.Single>)
// docid: M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
    public static func ConditionalSelect(condition : dotnet.System.Numerics.Vector_1<Swift.Int32>, left : dotnet.System.Numerics.Vector_1<Swift.Float>, right : dotnet.System.Numerics.Vector_1<Swift.Float>) throws -> dotnet.System.Numerics.Vector_1<Swift.Float> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_f32___ConditionalSelect_0__3__System_Numerics_Vector_i32__System_Numerics_Vector_f32__System_Numerics_Vector_f32_(&__thrown, condition.get_handle(), left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Double> ConditionalSelect(System.Numerics.Vector<System.Int64>, System.Numerics.Vector<System.Double>, System.Numerics.Vector<System.Double>)
// docid: M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
    public static func ConditionalSelect(condition : dotnet.System.Numerics.Vector_1<Swift.Int64>, left : dotnet.System.Numerics.Vector_1<Swift.Double>, right : dotnet.System.Numerics.Vector_1<Swift.Double>) throws -> dotnet.System.Numerics.Vector_1<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_f64___ConditionalSelect_0__3__System_Numerics_Vector_i64__System_Numerics_Vector_f64__System_Numerics_Vector_f64_(&__thrown, condition.get_handle(), left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> ConditionalSelect<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func ConditionalSelect<UT : SGBridgeGenericValue>(condition : dotnet.System.Numerics.Vector_1<UT>, left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___ConditionalSelect_1__3__System_Numerics_Vector_UT__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, condition.get_handle(), left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Double> ConvertToDouble(System.Numerics.Vector<System.Int64>)
// docid: M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})
    public static func ConvertToDouble(value : dotnet.System.Numerics.Vector_1<Swift.Int64>) throws -> dotnet.System.Numerics.Vector_1<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_f64___ConvertToDouble_0__1__System_Numerics_Vector_i64_(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Double> ConvertToDouble(System.Numerics.Vector<System.UInt64>)
// docid: M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})
    public static func ConvertToDouble(value : dotnet.System.Numerics.Vector_1<Swift.UInt64>) throws -> dotnet.System.Numerics.Vector_1<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_f64___ConvertToDouble_0__1__System_Numerics_Vector_u64_(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int32> ConvertToInt32(System.Numerics.Vector<System.Single>)
// docid: M:System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})
    public static func ConvertToInt32(value : dotnet.System.Numerics.Vector_1<Swift.Float>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i32___ConvertToInt32_0__1__System_Numerics_Vector_f32_(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int64> ConvertToInt64(System.Numerics.Vector<System.Double>)
// docid: M:System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})
    public static func ConvertToInt64(value : dotnet.System.Numerics.Vector_1<Swift.Double>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i64___ConvertToInt64_0__1__System_Numerics_Vector_f64_(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Single> ConvertToSingle(System.Numerics.Vector<System.Int32>)
// docid: M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})
    public static func ConvertToSingle(value : dotnet.System.Numerics.Vector_1<Swift.Int32>) throws -> dotnet.System.Numerics.Vector_1<Swift.Float> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_f32___ConvertToSingle_0__1__System_Numerics_Vector_i32_(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Single> ConvertToSingle(System.Numerics.Vector<System.UInt32>)
// docid: M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})
    public static func ConvertToSingle(value : dotnet.System.Numerics.Vector_1<Swift.UInt32>) throws -> dotnet.System.Numerics.Vector_1<Swift.Float> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_f32___ConvertToSingle_0__1__System_Numerics_Vector_u32_(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.UInt32> ConvertToUInt32(System.Numerics.Vector<System.Single>)
// docid: M:System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})
    public static func ConvertToUInt32(value : dotnet.System.Numerics.Vector_1<Swift.Float>) throws -> dotnet.System.Numerics.Vector_1<Swift.UInt32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_u32___ConvertToUInt32_0__1__System_Numerics_Vector_f32_(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.UInt64> ConvertToUInt64(System.Numerics.Vector<System.Double>)
// docid: M:System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})
    public static func ConvertToUInt64(value : dotnet.System.Numerics.Vector_1<Swift.Double>) throws -> dotnet.System.Numerics.Vector_1<Swift.UInt64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_u64___ConvertToUInt64_0__1__System_Numerics_Vector_f64_(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> Divide<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func Divide<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___Divide_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // T Dot<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func Dot<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_UT__Dot_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // System.Numerics.Vector<System.Int64> Equals(System.Numerics.Vector<System.Double>, System.Numerics.Vector<System.Double>)
// docid: M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
    public static func Equals(left : dotnet.System.Numerics.Vector_1<Swift.Double>, right : dotnet.System.Numerics.Vector_1<Swift.Double>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i64___Equals_0__2__System_Numerics_Vector_f64__System_Numerics_Vector_f64_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int32> Equals(System.Numerics.Vector<System.Int32>, System.Numerics.Vector<System.Int32>)
// docid: M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
    public static func Equals(left : dotnet.System.Numerics.Vector_1<Swift.Int32>, right : dotnet.System.Numerics.Vector_1<Swift.Int32>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i32___Equals_0__2__System_Numerics_Vector_i32__System_Numerics_Vector_i32_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int64> Equals(System.Numerics.Vector<System.Int64>, System.Numerics.Vector<System.Int64>)
// docid: M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
    public static func Equals(left : dotnet.System.Numerics.Vector_1<Swift.Int64>, right : dotnet.System.Numerics.Vector_1<Swift.Int64>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i64___Equals_0__2__System_Numerics_Vector_i64__System_Numerics_Vector_i64_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int32> Equals(System.Numerics.Vector<System.Single>, System.Numerics.Vector<System.Single>)
// docid: M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
    public static func Equals(left : dotnet.System.Numerics.Vector_1<Swift.Float>, right : dotnet.System.Numerics.Vector_1<Swift.Float>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i32___Equals_0__2__System_Numerics_Vector_f32__System_Numerics_Vector_f32_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // bool EqualsAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func EqualsAll<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_bool__EqualsAll_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool EqualsAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func EqualsAny<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_bool__EqualsAny_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Numerics.Vector<T> Equals<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func Equals<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___Equals_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Double> Floor(System.Numerics.Vector<System.Double>)
// docid: M:System.Numerics.Vector.Floor(System.Numerics.Vector{System.Double})
    public static func Floor(value : dotnet.System.Numerics.Vector_1<Swift.Double>) throws -> dotnet.System.Numerics.Vector_1<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_f64___Floor_0__1__System_Numerics_Vector_f64_(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Single> Floor(System.Numerics.Vector<System.Single>)
// docid: M:System.Numerics.Vector.Floor(System.Numerics.Vector{System.Single})
    public static func Floor(value : dotnet.System.Numerics.Vector_1<Swift.Float>) throws -> dotnet.System.Numerics.Vector_1<Swift.Float> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_f32___Floor_0__1__System_Numerics_Vector_f32_(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int64> GreaterThan(System.Numerics.Vector<System.Double>, System.Numerics.Vector<System.Double>)
// docid: M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
    public static func GreaterThan(left : dotnet.System.Numerics.Vector_1<Swift.Double>, right : dotnet.System.Numerics.Vector_1<Swift.Double>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i64___GreaterThan_0__2__System_Numerics_Vector_f64__System_Numerics_Vector_f64_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int32> GreaterThan(System.Numerics.Vector<System.Int32>, System.Numerics.Vector<System.Int32>)
// docid: M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
    public static func GreaterThan(left : dotnet.System.Numerics.Vector_1<Swift.Int32>, right : dotnet.System.Numerics.Vector_1<Swift.Int32>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i32___GreaterThan_0__2__System_Numerics_Vector_i32__System_Numerics_Vector_i32_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int64> GreaterThan(System.Numerics.Vector<System.Int64>, System.Numerics.Vector<System.Int64>)
// docid: M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
    public static func GreaterThan(left : dotnet.System.Numerics.Vector_1<Swift.Int64>, right : dotnet.System.Numerics.Vector_1<Swift.Int64>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i64___GreaterThan_0__2__System_Numerics_Vector_i64__System_Numerics_Vector_i64_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int32> GreaterThan(System.Numerics.Vector<System.Single>, System.Numerics.Vector<System.Single>)
// docid: M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
    public static func GreaterThan(left : dotnet.System.Numerics.Vector_1<Swift.Float>, right : dotnet.System.Numerics.Vector_1<Swift.Float>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i32___GreaterThan_0__2__System_Numerics_Vector_f32__System_Numerics_Vector_f32_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // bool GreaterThanAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func GreaterThanAll<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_bool__GreaterThanAll_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool GreaterThanAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func GreaterThanAny<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_bool__GreaterThanAny_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Numerics.Vector<System.Int64> GreaterThanOrEqual(System.Numerics.Vector<System.Double>, System.Numerics.Vector<System.Double>)
// docid: M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
    public static func GreaterThanOrEqual(left : dotnet.System.Numerics.Vector_1<Swift.Double>, right : dotnet.System.Numerics.Vector_1<Swift.Double>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i64___GreaterThanOrEqual_0__2__System_Numerics_Vector_f64__System_Numerics_Vector_f64_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int32> GreaterThanOrEqual(System.Numerics.Vector<System.Int32>, System.Numerics.Vector<System.Int32>)
// docid: M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
    public static func GreaterThanOrEqual(left : dotnet.System.Numerics.Vector_1<Swift.Int32>, right : dotnet.System.Numerics.Vector_1<Swift.Int32>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i32___GreaterThanOrEqual_0__2__System_Numerics_Vector_i32__System_Numerics_Vector_i32_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int64> GreaterThanOrEqual(System.Numerics.Vector<System.Int64>, System.Numerics.Vector<System.Int64>)
// docid: M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
    public static func GreaterThanOrEqual(left : dotnet.System.Numerics.Vector_1<Swift.Int64>, right : dotnet.System.Numerics.Vector_1<Swift.Int64>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i64___GreaterThanOrEqual_0__2__System_Numerics_Vector_i64__System_Numerics_Vector_i64_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int32> GreaterThanOrEqual(System.Numerics.Vector<System.Single>, System.Numerics.Vector<System.Single>)
// docid: M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
    public static func GreaterThanOrEqual(left : dotnet.System.Numerics.Vector_1<Swift.Float>, right : dotnet.System.Numerics.Vector_1<Swift.Float>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i32___GreaterThanOrEqual_0__2__System_Numerics_Vector_f32__System_Numerics_Vector_f32_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // bool GreaterThanOrEqualAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func GreaterThanOrEqualAll<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_bool__GreaterThanOrEqualAll_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool GreaterThanOrEqualAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func GreaterThanOrEqualAny<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_bool__GreaterThanOrEqualAny_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Numerics.Vector<T> GreaterThanOrEqual<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func GreaterThanOrEqual<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___GreaterThanOrEqual_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> GreaterThan<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func GreaterThan<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___GreaterThan_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int64> LessThan(System.Numerics.Vector<System.Double>, System.Numerics.Vector<System.Double>)
// docid: M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
    public static func LessThan(left : dotnet.System.Numerics.Vector_1<Swift.Double>, right : dotnet.System.Numerics.Vector_1<Swift.Double>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i64___LessThan_0__2__System_Numerics_Vector_f64__System_Numerics_Vector_f64_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int32> LessThan(System.Numerics.Vector<System.Int32>, System.Numerics.Vector<System.Int32>)
// docid: M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
    public static func LessThan(left : dotnet.System.Numerics.Vector_1<Swift.Int32>, right : dotnet.System.Numerics.Vector_1<Swift.Int32>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i32___LessThan_0__2__System_Numerics_Vector_i32__System_Numerics_Vector_i32_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int64> LessThan(System.Numerics.Vector<System.Int64>, System.Numerics.Vector<System.Int64>)
// docid: M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
    public static func LessThan(left : dotnet.System.Numerics.Vector_1<Swift.Int64>, right : dotnet.System.Numerics.Vector_1<Swift.Int64>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i64___LessThan_0__2__System_Numerics_Vector_i64__System_Numerics_Vector_i64_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int32> LessThan(System.Numerics.Vector<System.Single>, System.Numerics.Vector<System.Single>)
// docid: M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
    public static func LessThan(left : dotnet.System.Numerics.Vector_1<Swift.Float>, right : dotnet.System.Numerics.Vector_1<Swift.Float>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i32___LessThan_0__2__System_Numerics_Vector_f32__System_Numerics_Vector_f32_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // bool LessThanAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func LessThanAll<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_bool__LessThanAll_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool LessThanAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func LessThanAny<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_bool__LessThanAny_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Numerics.Vector<System.Int64> LessThanOrEqual(System.Numerics.Vector<System.Double>, System.Numerics.Vector<System.Double>)
// docid: M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
    public static func LessThanOrEqual(left : dotnet.System.Numerics.Vector_1<Swift.Double>, right : dotnet.System.Numerics.Vector_1<Swift.Double>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i64___LessThanOrEqual_0__2__System_Numerics_Vector_f64__System_Numerics_Vector_f64_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int32> LessThanOrEqual(System.Numerics.Vector<System.Int32>, System.Numerics.Vector<System.Int32>)
// docid: M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
    public static func LessThanOrEqual(left : dotnet.System.Numerics.Vector_1<Swift.Int32>, right : dotnet.System.Numerics.Vector_1<Swift.Int32>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i32___LessThanOrEqual_0__2__System_Numerics_Vector_i32__System_Numerics_Vector_i32_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int64> LessThanOrEqual(System.Numerics.Vector<System.Int64>, System.Numerics.Vector<System.Int64>)
// docid: M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
    public static func LessThanOrEqual(left : dotnet.System.Numerics.Vector_1<Swift.Int64>, right : dotnet.System.Numerics.Vector_1<Swift.Int64>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i64___LessThanOrEqual_0__2__System_Numerics_Vector_i64__System_Numerics_Vector_i64_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int32> LessThanOrEqual(System.Numerics.Vector<System.Single>, System.Numerics.Vector<System.Single>)
// docid: M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})
    public static func LessThanOrEqual(left : dotnet.System.Numerics.Vector_1<Swift.Float>, right : dotnet.System.Numerics.Vector_1<Swift.Float>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i32___LessThanOrEqual_0__2__System_Numerics_Vector_f32__System_Numerics_Vector_f32_(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // bool LessThanOrEqualAll<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func LessThanOrEqualAll<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_bool__LessThanOrEqualAll_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool LessThanOrEqualAny<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func LessThanOrEqualAny<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_bool__LessThanOrEqualAny_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Numerics.Vector<T> LessThanOrEqual<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func LessThanOrEqual<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___LessThanOrEqual_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> LessThan<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func LessThan<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___LessThan_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> Max<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func Max<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___Max_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> Min<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func Min<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___Min_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> Multiply<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func Multiply<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___Multiply_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> Multiply<T>(System.Numerics.Vector<T>, T)
// docid: M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)
    public static func Multiply<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : UT) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___Multiply_1__2__System_Numerics_Vector_UT__UT(UT.get_type_handle(), &__thrown, left.get_handle(), right.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> Multiply<T>(T, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})
    public static func Multiply<UT : SGBridgeGenericValue>(left : UT, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___Multiply_1__2__UT_System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.to_gval(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Single> Narrow(System.Numerics.Vector<System.Double>, System.Numerics.Vector<System.Double>)
// docid: M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})
    public static func Narrow(low : dotnet.System.Numerics.Vector_1<Swift.Double>, high : dotnet.System.Numerics.Vector_1<Swift.Double>) throws -> dotnet.System.Numerics.Vector_1<Swift.Float> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_f32___Narrow_0__2__System_Numerics_Vector_f64__System_Numerics_Vector_f64_(&__thrown, low.get_handle(), high.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.SByte> Narrow(System.Numerics.Vector<System.Int16>, System.Numerics.Vector<System.Int16>)
// docid: M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})
    public static func Narrow(low : dotnet.System.Numerics.Vector_1<Swift.Int16>, high : dotnet.System.Numerics.Vector_1<Swift.Int16>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i8___Narrow_0__2__System_Numerics_Vector_i16__System_Numerics_Vector_i16_(&__thrown, low.get_handle(), high.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int16> Narrow(System.Numerics.Vector<System.Int32>, System.Numerics.Vector<System.Int32>)
// docid: M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})
    public static func Narrow(low : dotnet.System.Numerics.Vector_1<Swift.Int32>, high : dotnet.System.Numerics.Vector_1<Swift.Int32>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int16> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i16___Narrow_0__2__System_Numerics_Vector_i32__System_Numerics_Vector_i32_(&__thrown, low.get_handle(), high.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Int32> Narrow(System.Numerics.Vector<System.Int64>, System.Numerics.Vector<System.Int64>)
// docid: M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})
    public static func Narrow(low : dotnet.System.Numerics.Vector_1<Swift.Int64>, high : dotnet.System.Numerics.Vector_1<Swift.Int64>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_i32___Narrow_0__2__System_Numerics_Vector_i64__System_Numerics_Vector_i64_(&__thrown, low.get_handle(), high.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.Byte> Narrow(System.Numerics.Vector<System.UInt16>, System.Numerics.Vector<System.UInt16>)
// docid: M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})
    public static func Narrow(low : dotnet.System.Numerics.Vector_1<Swift.UInt16>, high : dotnet.System.Numerics.Vector_1<Swift.UInt16>) throws -> dotnet.System.Numerics.Vector_1<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_u8___Narrow_0__2__System_Numerics_Vector_u16__System_Numerics_Vector_u16_(&__thrown, low.get_handle(), high.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.UInt16> Narrow(System.Numerics.Vector<System.UInt32>, System.Numerics.Vector<System.UInt32>)
// docid: M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})
    public static func Narrow(low : dotnet.System.Numerics.Vector_1<Swift.UInt32>, high : dotnet.System.Numerics.Vector_1<Swift.UInt32>) throws -> dotnet.System.Numerics.Vector_1<Swift.UInt16> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_u16___Narrow_0__2__System_Numerics_Vector_u32__System_Numerics_Vector_u32_(&__thrown, low.get_handle(), high.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<System.UInt32> Narrow(System.Numerics.Vector<System.UInt64>, System.Numerics.Vector<System.UInt64>)
// docid: M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})
    public static func Narrow(low : dotnet.System.Numerics.Vector_1<Swift.UInt64>, high : dotnet.System.Numerics.Vector_1<Swift.UInt64>) throws -> dotnet.System.Numerics.Vector_1<Swift.UInt32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_u32___Narrow_0__2__System_Numerics_Vector_u64__System_Numerics_Vector_u64_(&__thrown, low.get_handle(), high.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> Negate<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})
    public static func Negate<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___Negate_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> OnesComplement<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})
    public static func OnesComplement<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___OnesComplement_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> SquareRoot<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})
    public static func SquareRoot<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___SquareRoot_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.Numerics.Vector<T> Subtract<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func Subtract<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___Subtract_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // void Widen(System.Numerics.Vector<System.Byte>, ref System.Numerics.Vector<System.UInt16>, ref System.Numerics.Vector<System.UInt16>)
// docid: M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)
    public static func Widen(source : dotnet.System.Numerics.Vector_1<Swift.UInt8>, low : inout Optional<dotnet.System.Numerics.Vector_1<Swift.UInt16>>, high : inout Optional<dotnet.System.Numerics.Vector_1<Swift.UInt16>>) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_low = (low != nil) ? (low!.get_handle()) : nil;
            var _tmp_out_high = (high != nil) ? (high!.get_handle()) : nil;
        System_Numerics_Vector_void__Widen_0__3__System_Numerics_Vector_u8__outSystem_Numerics_Vector_u16__outSystem_Numerics_Vector_u16_(&__thrown, source.get_handle(), &_tmp_out_low, &_tmp_out_high);
        let __h__tmp2_low = _tmp_out_low;
        let _tmp2_low = (__h__tmp2_low != nil) ? dotnet.System.Numerics.Vector_1<Swift.UInt16>(hndl: __h__tmp2_low!) : nil;
            low = _tmp2_low;
        let __h__tmp2_high = _tmp_out_high;
        let _tmp2_high = (__h__tmp2_high != nil) ? dotnet.System.Numerics.Vector_1<Swift.UInt16>(hndl: __h__tmp2_high!) : nil;
            high = _tmp2_high;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Widen(System.Numerics.Vector<System.Int16>, ref System.Numerics.Vector<System.Int32>, ref System.Numerics.Vector<System.Int32>)
// docid: M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)
    public static func Widen(source : dotnet.System.Numerics.Vector_1<Swift.Int16>, low : inout Optional<dotnet.System.Numerics.Vector_1<Swift.Int32>>, high : inout Optional<dotnet.System.Numerics.Vector_1<Swift.Int32>>) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_low = (low != nil) ? (low!.get_handle()) : nil;
            var _tmp_out_high = (high != nil) ? (high!.get_handle()) : nil;
        System_Numerics_Vector_void__Widen_0__3__System_Numerics_Vector_i16__outSystem_Numerics_Vector_i32__outSystem_Numerics_Vector_i32_(&__thrown, source.get_handle(), &_tmp_out_low, &_tmp_out_high);
        let __h__tmp2_low = _tmp_out_low;
        let _tmp2_low = (__h__tmp2_low != nil) ? dotnet.System.Numerics.Vector_1<Swift.Int32>(hndl: __h__tmp2_low!) : nil;
            low = _tmp2_low;
        let __h__tmp2_high = _tmp_out_high;
        let _tmp2_high = (__h__tmp2_high != nil) ? dotnet.System.Numerics.Vector_1<Swift.Int32>(hndl: __h__tmp2_high!) : nil;
            high = _tmp2_high;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Widen(System.Numerics.Vector<System.Int32>, ref System.Numerics.Vector<System.Int64>, ref System.Numerics.Vector<System.Int64>)
// docid: M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)
    public static func Widen(source : dotnet.System.Numerics.Vector_1<Swift.Int32>, low : inout Optional<dotnet.System.Numerics.Vector_1<Swift.Int64>>, high : inout Optional<dotnet.System.Numerics.Vector_1<Swift.Int64>>) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_low = (low != nil) ? (low!.get_handle()) : nil;
            var _tmp_out_high = (high != nil) ? (high!.get_handle()) : nil;
        System_Numerics_Vector_void__Widen_0__3__System_Numerics_Vector_i32__outSystem_Numerics_Vector_i64__outSystem_Numerics_Vector_i64_(&__thrown, source.get_handle(), &_tmp_out_low, &_tmp_out_high);
        let __h__tmp2_low = _tmp_out_low;
        let _tmp2_low = (__h__tmp2_low != nil) ? dotnet.System.Numerics.Vector_1<Swift.Int64>(hndl: __h__tmp2_low!) : nil;
            low = _tmp2_low;
        let __h__tmp2_high = _tmp_out_high;
        let _tmp2_high = (__h__tmp2_high != nil) ? dotnet.System.Numerics.Vector_1<Swift.Int64>(hndl: __h__tmp2_high!) : nil;
            high = _tmp2_high;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Widen(System.Numerics.Vector<System.SByte>, ref System.Numerics.Vector<System.Int16>, ref System.Numerics.Vector<System.Int16>)
// docid: M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)
    public static func Widen(source : dotnet.System.Numerics.Vector_1<Swift.Int8>, low : inout Optional<dotnet.System.Numerics.Vector_1<Swift.Int16>>, high : inout Optional<dotnet.System.Numerics.Vector_1<Swift.Int16>>) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_low = (low != nil) ? (low!.get_handle()) : nil;
            var _tmp_out_high = (high != nil) ? (high!.get_handle()) : nil;
        System_Numerics_Vector_void__Widen_0__3__System_Numerics_Vector_i8__outSystem_Numerics_Vector_i16__outSystem_Numerics_Vector_i16_(&__thrown, source.get_handle(), &_tmp_out_low, &_tmp_out_high);
        let __h__tmp2_low = _tmp_out_low;
        let _tmp2_low = (__h__tmp2_low != nil) ? dotnet.System.Numerics.Vector_1<Swift.Int16>(hndl: __h__tmp2_low!) : nil;
            low = _tmp2_low;
        let __h__tmp2_high = _tmp_out_high;
        let _tmp2_high = (__h__tmp2_high != nil) ? dotnet.System.Numerics.Vector_1<Swift.Int16>(hndl: __h__tmp2_high!) : nil;
            high = _tmp2_high;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Widen(System.Numerics.Vector<System.Single>, ref System.Numerics.Vector<System.Double>, ref System.Numerics.Vector<System.Double>)
// docid: M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)
    public static func Widen(source : dotnet.System.Numerics.Vector_1<Swift.Float>, low : inout Optional<dotnet.System.Numerics.Vector_1<Swift.Double>>, high : inout Optional<dotnet.System.Numerics.Vector_1<Swift.Double>>) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_low = (low != nil) ? (low!.get_handle()) : nil;
            var _tmp_out_high = (high != nil) ? (high!.get_handle()) : nil;
        System_Numerics_Vector_void__Widen_0__3__System_Numerics_Vector_f32__outSystem_Numerics_Vector_f64__outSystem_Numerics_Vector_f64_(&__thrown, source.get_handle(), &_tmp_out_low, &_tmp_out_high);
        let __h__tmp2_low = _tmp_out_low;
        let _tmp2_low = (__h__tmp2_low != nil) ? dotnet.System.Numerics.Vector_1<Swift.Double>(hndl: __h__tmp2_low!) : nil;
            low = _tmp2_low;
        let __h__tmp2_high = _tmp_out_high;
        let _tmp2_high = (__h__tmp2_high != nil) ? dotnet.System.Numerics.Vector_1<Swift.Double>(hndl: __h__tmp2_high!) : nil;
            high = _tmp2_high;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Widen(System.Numerics.Vector<System.UInt16>, ref System.Numerics.Vector<System.UInt32>, ref System.Numerics.Vector<System.UInt32>)
// docid: M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)
    public static func Widen(source : dotnet.System.Numerics.Vector_1<Swift.UInt16>, low : inout Optional<dotnet.System.Numerics.Vector_1<Swift.UInt32>>, high : inout Optional<dotnet.System.Numerics.Vector_1<Swift.UInt32>>) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_low = (low != nil) ? (low!.get_handle()) : nil;
            var _tmp_out_high = (high != nil) ? (high!.get_handle()) : nil;
        System_Numerics_Vector_void__Widen_0__3__System_Numerics_Vector_u16__outSystem_Numerics_Vector_u32__outSystem_Numerics_Vector_u32_(&__thrown, source.get_handle(), &_tmp_out_low, &_tmp_out_high);
        let __h__tmp2_low = _tmp_out_low;
        let _tmp2_low = (__h__tmp2_low != nil) ? dotnet.System.Numerics.Vector_1<Swift.UInt32>(hndl: __h__tmp2_low!) : nil;
            low = _tmp2_low;
        let __h__tmp2_high = _tmp_out_high;
        let _tmp2_high = (__h__tmp2_high != nil) ? dotnet.System.Numerics.Vector_1<Swift.UInt32>(hndl: __h__tmp2_high!) : nil;
            high = _tmp2_high;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void Widen(System.Numerics.Vector<System.UInt32>, ref System.Numerics.Vector<System.UInt64>, ref System.Numerics.Vector<System.UInt64>)
// docid: M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)
    public static func Widen(source : dotnet.System.Numerics.Vector_1<Swift.UInt32>, low : inout Optional<dotnet.System.Numerics.Vector_1<Swift.UInt64>>, high : inout Optional<dotnet.System.Numerics.Vector_1<Swift.UInt64>>) throws {
        var __thrown : NullableHandle = nil;
            var _tmp_out_low = (low != nil) ? (low!.get_handle()) : nil;
            var _tmp_out_high = (high != nil) ? (high!.get_handle()) : nil;
        System_Numerics_Vector_void__Widen_0__3__System_Numerics_Vector_u32__outSystem_Numerics_Vector_u64__outSystem_Numerics_Vector_u64_(&__thrown, source.get_handle(), &_tmp_out_low, &_tmp_out_high);
        let __h__tmp2_low = _tmp_out_low;
        let _tmp2_low = (__h__tmp2_low != nil) ? dotnet.System.Numerics.Vector_1<Swift.UInt64>(hndl: __h__tmp2_low!) : nil;
            low = _tmp2_low;
        let __h__tmp2_high = _tmp_out_high;
        let _tmp2_high = (__h__tmp2_high != nil) ? dotnet.System.Numerics.Vector_1<Swift.UInt64>(hndl: __h__tmp2_high!) : nil;
            high = _tmp2_high;
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // System.Numerics.Vector<T> Xor<T>(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})
    public static func Xor<UT : SGBridgeGenericValue>(left : dotnet.System.Numerics.Vector_1<UT>, right : dotnet.System.Numerics.Vector_1<UT>) throws -> dotnet.System.Numerics.Vector_1<UT> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_System_Numerics_Vector_UT___Xor_1__2__System_Numerics_Vector_UT__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // T Sum<T>(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector.Sum``1(System.Numerics.Vector{``0})
    public static func Sum<UT : SGBridgeGenericValue>(value : dotnet.System.Numerics.Vector_1<UT>) throws -> UT {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_UT__Sum_1__1__System_Numerics_Vector_UT_(UT.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return UT(gval: __return);
        }
    }
    // [IsSpecialName] bool get_IsHardwareAccelerated()
// docid: M:System.Numerics.Vector.get_IsHardwareAccelerated
    public static func get_IsHardwareAccelerated() throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_bool__get_IsHardwareAccelerated_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    public static var IsHardwareAccelerated : Bool {
        get {
            return try! get_IsHardwareAccelerated();
        }
    }
} // Vector


// type: System.Numerics.Vector2
// boxed value type
public final class Vector2
    :
    dotnet.System.Object,
    System_IFormattable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Numerics_Vector2_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public static var One : dotnet.System.Numerics.Vector2 {
        get {
            return try! get_One();
        }
    }
    public static var UnitX : dotnet.System.Numerics.Vector2 {
        get {
            return try! get_UnitX();
        }
    }
    public static var UnitY : dotnet.System.Numerics.Vector2 {
        get {
            return try! get_UnitY();
        }
    }
    public static var Zero : dotnet.System.Numerics.Vector2 {
        get {
            return try! get_Zero();
        }
    }
    // .ctor(System.Single)
// docid: M:System.Numerics.Vector2.#ctor(System.Single)
    public init(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Vector2_ctor_0__1__f32(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Single, System.Single)
// docid: M:System.Numerics.Vector2.#ctor(System.Single,System.Single)
    public init(x : Swift.Float, y : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Vector2_ctor_0__2__f32_f32(&__thrown, x, y);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE ctor (span) .ctor(System.ReadOnlySpan<System.Single>)
    public override init() {
        let h = System_Numerics_Vector2_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Numerics.Vector2 Abs(System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.Abs(System.Numerics.Vector2)
    public class func Abs(value : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Abs_0__1__Vector2(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 Add(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func Add(left : dotnet.System.Numerics.Vector2, right : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Add_0__2__Vector2_Vector2(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 Clamp(System.Numerics.Vector2, System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)
    public class func Clamp(value1 : dotnet.System.Numerics.Vector2, min : dotnet.System.Numerics.Vector2, max : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Clamp_0__3__Vector2_Vector2_Vector2(&__thrown, value1.get_handle(), min.get_handle(), max.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // void CopyTo(System.Single[])
// docid: M:System.Numerics.Vector2.CopyTo(System.Single[])
    public func CopyTo(array : dotnet.System_Arr<Swift.Float>) throws {
        var __thrown : NullableHandle = nil;
        System_Numerics_Vector2_void__CopyTo_0__1__f32Array(&__thrown, self.get_handle(), array.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(System.Single[], System.Int32)
// docid: M:System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)
    public func CopyTo(array : dotnet.System_Arr<Swift.Float>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Numerics_Vector2_void__CopyTo_0__2__f32Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void CopyTo(System.Span<System.Single>)
// TODO COPE (write_all_methods) (span) bool TryCopyTo(System.Span<System.Single>)
    // System.Single Distance(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func Distance(value1 : dotnet.System.Numerics.Vector2, value2 : dotnet.System.Numerics.Vector2) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_f32__Distance_0__2__Vector2_Vector2(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single DistanceSquared(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func DistanceSquared(value1 : dotnet.System.Numerics.Vector2, value2 : dotnet.System.Numerics.Vector2) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_f32__DistanceSquared_0__2__Vector2_Vector2(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Numerics.Vector2 Divide(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func Divide(left : dotnet.System.Numerics.Vector2, right : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Divide_0__2__Vector2_Vector2(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 Divide(System.Numerics.Vector2, System.Single)
// docid: M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)
    public class func Divide(left : dotnet.System.Numerics.Vector2, divisor : Swift.Float) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Divide_0__2__Vector2_f32(&__thrown, left.get_handle(), divisor);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Single Dot(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func Dot(value1 : dotnet.System.Numerics.Vector2, value2 : dotnet.System.Numerics.Vector2) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_f32__Dot_0__2__Vector2_Vector2(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Equals(System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.Equals(System.Numerics.Vector2)
    public func Equals(other : dotnet.System.Numerics.Vector2) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_bool__Equals_0__1__Vector2(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Numerics.Vector2.Equals(System.Object)
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Numerics.Vector2.GetHashCode
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single Length()
// docid: M:System.Numerics.Vector2.Length
    public func Length() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_f32__Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single LengthSquared()
// docid: M:System.Numerics.Vector2.LengthSquared
    public func LengthSquared() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_f32__LengthSquared_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Numerics.Vector2 Lerp(System.Numerics.Vector2, System.Numerics.Vector2, System.Single)
// docid: M:System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
    public class func Lerp(value1 : dotnet.System.Numerics.Vector2, value2 : dotnet.System.Numerics.Vector2, amount : Swift.Float) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Lerp_0__3__Vector2_Vector2_f32(&__thrown, value1.get_handle(), value2.get_handle(), amount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 Max(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func Max(value1 : dotnet.System.Numerics.Vector2, value2 : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Max_0__2__Vector2_Vector2(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 Min(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func Min(value1 : dotnet.System.Numerics.Vector2, value2 : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Min_0__2__Vector2_Vector2(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 Multiply(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func Multiply(left : dotnet.System.Numerics.Vector2, right : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Multiply_0__2__Vector2_Vector2(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 Multiply(System.Numerics.Vector2, System.Single)
// docid: M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)
    public class func Multiply(left : dotnet.System.Numerics.Vector2, right : Swift.Float) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Multiply_0__2__Vector2_f32(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 Multiply(System.Single, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)
    public class func Multiply(left : Swift.Float, right : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Multiply_0__2__f32_Vector2(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 Negate(System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.Negate(System.Numerics.Vector2)
    public class func Negate(value : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Negate_0__1__Vector2(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 Normalize(System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.Normalize(System.Numerics.Vector2)
    public class func Normalize(value : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Normalize_0__1__Vector2(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector2 op_Addition(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func op_Addition(left : dotnet.System.Numerics.Vector2, right : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__op_Addition_0__2__Vector2_Vector2(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    public static func + (left : dotnet.System.Numerics.Vector2, right : dotnet.System.Numerics.Vector2) -> dotnet.System.Numerics.Vector2
    {
        return try! op_Addition(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector2 op_Division(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func op_Division(left : dotnet.System.Numerics.Vector2, right : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__op_Division_0__2__Vector2_Vector2(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    public static func / (left : dotnet.System.Numerics.Vector2, right : dotnet.System.Numerics.Vector2) -> dotnet.System.Numerics.Vector2
    {
        return try! op_Division(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector2 op_Division(System.Numerics.Vector2, System.Single)
// docid: M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)
    public class func op_Division(value1 : dotnet.System.Numerics.Vector2, value2 : Swift.Float) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__op_Division_0__2__Vector2_f32(&__thrown, value1.get_handle(), value2);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    public static func / (value1 : dotnet.System.Numerics.Vector2, value2 : Swift.Float) -> dotnet.System.Numerics.Vector2
    {
        return try! op_Division(value1: value1, value2: value2);
    }
    // [IsSpecialName] bool op_Equality(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func op_Equality(left : dotnet.System.Numerics.Vector2, right : dotnet.System.Numerics.Vector2) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_bool__op_Equality_0__2__Vector2_Vector2(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    public static func == (left : dotnet.System.Numerics.Vector2, right : dotnet.System.Numerics.Vector2) -> Bool
    {
        return try! op_Equality(left: left, right: right);
    }
    // [IsSpecialName] bool op_Inequality(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func op_Inequality(left : dotnet.System.Numerics.Vector2, right : dotnet.System.Numerics.Vector2) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_bool__op_Inequality_0__2__Vector2_Vector2(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    public static func != (left : dotnet.System.Numerics.Vector2, right : dotnet.System.Numerics.Vector2) -> Bool
    {
        return try! op_Inequality(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector2 op_Multiply(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func op_Multiply(left : dotnet.System.Numerics.Vector2, right : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__op_Multiply_0__2__Vector2_Vector2(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    public static func * (left : dotnet.System.Numerics.Vector2, right : dotnet.System.Numerics.Vector2) -> dotnet.System.Numerics.Vector2
    {
        return try! op_Multiply(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector2 op_Multiply(System.Numerics.Vector2, System.Single)
// docid: M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)
    public class func op_Multiply(left : dotnet.System.Numerics.Vector2, right : Swift.Float) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__op_Multiply_0__2__Vector2_f32(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    public static func * (left : dotnet.System.Numerics.Vector2, right : Swift.Float) -> dotnet.System.Numerics.Vector2
    {
        return try! op_Multiply(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector2 op_Multiply(System.Single, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)
    public class func op_Multiply(left : Swift.Float, right : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__op_Multiply_0__2__f32_Vector2(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    public static func * (left : Swift.Float, right : dotnet.System.Numerics.Vector2) -> dotnet.System.Numerics.Vector2
    {
        return try! op_Multiply(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector2 op_Subtraction(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func op_Subtraction(left : dotnet.System.Numerics.Vector2, right : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__op_Subtraction_0__2__Vector2_Vector2(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    public static func - (left : dotnet.System.Numerics.Vector2, right : dotnet.System.Numerics.Vector2) -> dotnet.System.Numerics.Vector2
    {
        return try! op_Subtraction(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector2 op_UnaryNegation(System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)
    public class func op_UnaryNegation(value : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__op_UnaryNegation_0__1__Vector2(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 Reflect(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func Reflect(vector : dotnet.System.Numerics.Vector2, normal : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Reflect_0__2__Vector2_Vector2(&__thrown, vector.get_handle(), normal.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 SquareRoot(System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)
    public class func SquareRoot(value : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__SquareRoot_0__1__Vector2(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 Subtract(System.Numerics.Vector2, System.Numerics.Vector2)
// docid: M:System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)
    public class func Subtract(left : dotnet.System.Numerics.Vector2, right : dotnet.System.Numerics.Vector2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Subtract_0__2__Vector2_Vector2(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Numerics.Vector2.ToString
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.String)
// docid: M:System.Numerics.Vector2.ToString(System.String)
    public func ToString(format : Optional<dotnet.System.String>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_String__ToString_0__1__String(&__thrown, self.get_handle(), format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.String, System.IFormatProvider)
// docid: M:System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)
    public func ToString(format : Optional<dotnet.System.String>, formatProvider : Optional<dotnet.System.IFormatProvider>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_String__ToString_0__2__String_IFormatProvider(&__thrown, self.get_handle(), format?.get_handle() ?? nil, formatProvider?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Numerics.Vector2 Transform(System.Numerics.Vector2, System.Numerics.Matrix3x2)
// docid: M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)
    public class func Transform(position : dotnet.System.Numerics.Vector2, matrix : dotnet.System.Numerics.Matrix3x2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Transform_0__2__Vector2_Matrix3x2(&__thrown, position.get_handle(), matrix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 Transform(System.Numerics.Vector2, System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)
    public class func Transform(position : dotnet.System.Numerics.Vector2, matrix : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Transform_0__2__Vector2_Matrix4x4(&__thrown, position.get_handle(), matrix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 Transform(System.Numerics.Vector2, System.Numerics.Quaternion)
// docid: M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)
    public class func Transform(value : dotnet.System.Numerics.Vector2, rotation : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__Transform_0__2__Vector2_Quaternion(&__thrown, value.get_handle(), rotation.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 TransformNormal(System.Numerics.Vector2, System.Numerics.Matrix3x2)
// docid: M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)
    public class func TransformNormal(normal : dotnet.System.Numerics.Vector2, matrix : dotnet.System.Numerics.Matrix3x2) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__TransformNormal_0__2__Vector2_Matrix3x2(&__thrown, normal.get_handle(), matrix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // System.Numerics.Vector2 TransformNormal(System.Numerics.Vector2, System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)
    public class func TransformNormal(normal : dotnet.System.Numerics.Vector2, matrix : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__TransformNormal_0__2__Vector2_Matrix4x4(&__thrown, normal.get_handle(), matrix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector2 get_One()
// docid: M:System.Numerics.Vector2.get_One
    public class func get_One() throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__get_One_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector2 get_UnitX()
// docid: M:System.Numerics.Vector2.get_UnitX
    public class func get_UnitX() throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__get_UnitX_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector2 get_UnitY()
// docid: M:System.Numerics.Vector2.get_UnitY
    public class func get_UnitY() throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__get_UnitY_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector2 get_Zero()
// docid: M:System.Numerics.Vector2.get_Zero
    public class func get_Zero() throws -> dotnet.System.Numerics.Vector2 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector2_Vector2__get_Zero_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector2(hndl : __return);
        }
    }
} // Vector2


// type: System.Numerics.Vector3
// boxed value type
public final class Vector3
    :
    dotnet.System.Object,
    System_IFormattable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Numerics_Vector3_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public static var One : dotnet.System.Numerics.Vector3 {
        get {
            return try! get_One();
        }
    }
    public static var UnitX : dotnet.System.Numerics.Vector3 {
        get {
            return try! get_UnitX();
        }
    }
    public static var UnitY : dotnet.System.Numerics.Vector3 {
        get {
            return try! get_UnitY();
        }
    }
    public static var UnitZ : dotnet.System.Numerics.Vector3 {
        get {
            return try! get_UnitZ();
        }
    }
    public static var Zero : dotnet.System.Numerics.Vector3 {
        get {
            return try! get_Zero();
        }
    }
    // .ctor(System.Numerics.Vector2, System.Single)
// docid: M:System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)
    public init(value : dotnet.System.Numerics.Vector2, z : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Vector3_ctor_0__2__Vector2_f32(&__thrown, value.get_handle(), z);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Single)
// docid: M:System.Numerics.Vector3.#ctor(System.Single)
    public init(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Vector3_ctor_0__1__f32(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Single, System.Single, System.Single)
// docid: M:System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)
    public init(x : Swift.Float, y : Swift.Float, z : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Vector3_ctor_0__3__f32_f32_f32(&__thrown, x, y, z);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE ctor (span) .ctor(System.ReadOnlySpan<System.Single>)
    public override init() {
        let h = System_Numerics_Vector3_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Numerics.Vector3 Abs(System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.Abs(System.Numerics.Vector3)
    public class func Abs(value : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Abs_0__1__Vector3(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Numerics.Vector3 Add(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func Add(left : dotnet.System.Numerics.Vector3, right : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Add_0__2__Vector3_Vector3(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Numerics.Vector3 Clamp(System.Numerics.Vector3, System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
    public class func Clamp(value1 : dotnet.System.Numerics.Vector3, min : dotnet.System.Numerics.Vector3, max : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Clamp_0__3__Vector3_Vector3_Vector3(&__thrown, value1.get_handle(), min.get_handle(), max.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // void CopyTo(System.Single[])
// docid: M:System.Numerics.Vector3.CopyTo(System.Single[])
    public func CopyTo(array : dotnet.System_Arr<Swift.Float>) throws {
        var __thrown : NullableHandle = nil;
        System_Numerics_Vector3_void__CopyTo_0__1__f32Array(&__thrown, self.get_handle(), array.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(System.Single[], System.Int32)
// docid: M:System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)
    public func CopyTo(array : dotnet.System_Arr<Swift.Float>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Numerics_Vector3_void__CopyTo_0__2__f32Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void CopyTo(System.Span<System.Single>)
// TODO COPE (write_all_methods) (span) bool TryCopyTo(System.Span<System.Single>)
    // System.Numerics.Vector3 Cross(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func Cross(vector1 : dotnet.System.Numerics.Vector3, vector2 : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Cross_0__2__Vector3_Vector3(&__thrown, vector1.get_handle(), vector2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Single Distance(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func Distance(value1 : dotnet.System.Numerics.Vector3, value2 : dotnet.System.Numerics.Vector3) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_f32__Distance_0__2__Vector3_Vector3(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single DistanceSquared(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func DistanceSquared(value1 : dotnet.System.Numerics.Vector3, value2 : dotnet.System.Numerics.Vector3) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_f32__DistanceSquared_0__2__Vector3_Vector3(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Numerics.Vector3 Divide(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func Divide(left : dotnet.System.Numerics.Vector3, right : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Divide_0__2__Vector3_Vector3(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Numerics.Vector3 Divide(System.Numerics.Vector3, System.Single)
// docid: M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)
    public class func Divide(left : dotnet.System.Numerics.Vector3, divisor : Swift.Float) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Divide_0__2__Vector3_f32(&__thrown, left.get_handle(), divisor);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Single Dot(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func Dot(vector1 : dotnet.System.Numerics.Vector3, vector2 : dotnet.System.Numerics.Vector3) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_f32__Dot_0__2__Vector3_Vector3(&__thrown, vector1.get_handle(), vector2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Equals(System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.Equals(System.Numerics.Vector3)
    public func Equals(other : dotnet.System.Numerics.Vector3) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_bool__Equals_0__1__Vector3(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Numerics.Vector3.Equals(System.Object)
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Numerics.Vector3.GetHashCode
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single Length()
// docid: M:System.Numerics.Vector3.Length
    public func Length() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_f32__Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single LengthSquared()
// docid: M:System.Numerics.Vector3.LengthSquared
    public func LengthSquared() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_f32__LengthSquared_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Numerics.Vector3 Lerp(System.Numerics.Vector3, System.Numerics.Vector3, System.Single)
// docid: M:System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)
    public class func Lerp(value1 : dotnet.System.Numerics.Vector3, value2 : dotnet.System.Numerics.Vector3, amount : Swift.Float) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Lerp_0__3__Vector3_Vector3_f32(&__thrown, value1.get_handle(), value2.get_handle(), amount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Numerics.Vector3 Max(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func Max(value1 : dotnet.System.Numerics.Vector3, value2 : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Max_0__2__Vector3_Vector3(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Numerics.Vector3 Min(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func Min(value1 : dotnet.System.Numerics.Vector3, value2 : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Min_0__2__Vector3_Vector3(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Numerics.Vector3 Multiply(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func Multiply(left : dotnet.System.Numerics.Vector3, right : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Multiply_0__2__Vector3_Vector3(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Numerics.Vector3 Multiply(System.Numerics.Vector3, System.Single)
// docid: M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)
    public class func Multiply(left : dotnet.System.Numerics.Vector3, right : Swift.Float) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Multiply_0__2__Vector3_f32(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Numerics.Vector3 Multiply(System.Single, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)
    public class func Multiply(left : Swift.Float, right : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Multiply_0__2__f32_Vector3(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Numerics.Vector3 Negate(System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.Negate(System.Numerics.Vector3)
    public class func Negate(value : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Negate_0__1__Vector3(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Numerics.Vector3 Normalize(System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.Normalize(System.Numerics.Vector3)
    public class func Normalize(value : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Normalize_0__1__Vector3(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector3 op_Addition(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func op_Addition(left : dotnet.System.Numerics.Vector3, right : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__op_Addition_0__2__Vector3_Vector3(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    public static func + (left : dotnet.System.Numerics.Vector3, right : dotnet.System.Numerics.Vector3) -> dotnet.System.Numerics.Vector3
    {
        return try! op_Addition(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector3 op_Division(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func op_Division(left : dotnet.System.Numerics.Vector3, right : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__op_Division_0__2__Vector3_Vector3(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    public static func / (left : dotnet.System.Numerics.Vector3, right : dotnet.System.Numerics.Vector3) -> dotnet.System.Numerics.Vector3
    {
        return try! op_Division(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector3 op_Division(System.Numerics.Vector3, System.Single)
// docid: M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)
    public class func op_Division(value1 : dotnet.System.Numerics.Vector3, value2 : Swift.Float) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__op_Division_0__2__Vector3_f32(&__thrown, value1.get_handle(), value2);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    public static func / (value1 : dotnet.System.Numerics.Vector3, value2 : Swift.Float) -> dotnet.System.Numerics.Vector3
    {
        return try! op_Division(value1: value1, value2: value2);
    }
    // [IsSpecialName] bool op_Equality(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func op_Equality(left : dotnet.System.Numerics.Vector3, right : dotnet.System.Numerics.Vector3) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_bool__op_Equality_0__2__Vector3_Vector3(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    public static func == (left : dotnet.System.Numerics.Vector3, right : dotnet.System.Numerics.Vector3) -> Bool
    {
        return try! op_Equality(left: left, right: right);
    }
    // [IsSpecialName] bool op_Inequality(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func op_Inequality(left : dotnet.System.Numerics.Vector3, right : dotnet.System.Numerics.Vector3) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_bool__op_Inequality_0__2__Vector3_Vector3(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    public static func != (left : dotnet.System.Numerics.Vector3, right : dotnet.System.Numerics.Vector3) -> Bool
    {
        return try! op_Inequality(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector3 op_Multiply(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func op_Multiply(left : dotnet.System.Numerics.Vector3, right : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__op_Multiply_0__2__Vector3_Vector3(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    public static func * (left : dotnet.System.Numerics.Vector3, right : dotnet.System.Numerics.Vector3) -> dotnet.System.Numerics.Vector3
    {
        return try! op_Multiply(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector3 op_Multiply(System.Numerics.Vector3, System.Single)
// docid: M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)
    public class func op_Multiply(left : dotnet.System.Numerics.Vector3, right : Swift.Float) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__op_Multiply_0__2__Vector3_f32(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    public static func * (left : dotnet.System.Numerics.Vector3, right : Swift.Float) -> dotnet.System.Numerics.Vector3
    {
        return try! op_Multiply(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector3 op_Multiply(System.Single, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)
    public class func op_Multiply(left : Swift.Float, right : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__op_Multiply_0__2__f32_Vector3(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    public static func * (left : Swift.Float, right : dotnet.System.Numerics.Vector3) -> dotnet.System.Numerics.Vector3
    {
        return try! op_Multiply(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector3 op_Subtraction(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func op_Subtraction(left : dotnet.System.Numerics.Vector3, right : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__op_Subtraction_0__2__Vector3_Vector3(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    public static func - (left : dotnet.System.Numerics.Vector3, right : dotnet.System.Numerics.Vector3) -> dotnet.System.Numerics.Vector3
    {
        return try! op_Subtraction(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector3 op_UnaryNegation(System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)
    public class func op_UnaryNegation(value : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__op_UnaryNegation_0__1__Vector3(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Numerics.Vector3 Reflect(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func Reflect(vector : dotnet.System.Numerics.Vector3, normal : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Reflect_0__2__Vector3_Vector3(&__thrown, vector.get_handle(), normal.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Numerics.Vector3 SquareRoot(System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)
    public class func SquareRoot(value : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__SquareRoot_0__1__Vector3(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Numerics.Vector3 Subtract(System.Numerics.Vector3, System.Numerics.Vector3)
// docid: M:System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)
    public class func Subtract(left : dotnet.System.Numerics.Vector3, right : dotnet.System.Numerics.Vector3) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Subtract_0__2__Vector3_Vector3(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Numerics.Vector3.ToString
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.String)
// docid: M:System.Numerics.Vector3.ToString(System.String)
    public func ToString(format : Optional<dotnet.System.String>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_String__ToString_0__1__String(&__thrown, self.get_handle(), format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.String, System.IFormatProvider)
// docid: M:System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)
    public func ToString(format : Optional<dotnet.System.String>, formatProvider : Optional<dotnet.System.IFormatProvider>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_String__ToString_0__2__String_IFormatProvider(&__thrown, self.get_handle(), format?.get_handle() ?? nil, formatProvider?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Numerics.Vector3 Transform(System.Numerics.Vector3, System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)
    public class func Transform(position : dotnet.System.Numerics.Vector3, matrix : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Transform_0__2__Vector3_Matrix4x4(&__thrown, position.get_handle(), matrix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Numerics.Vector3 Transform(System.Numerics.Vector3, System.Numerics.Quaternion)
// docid: M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)
    public class func Transform(value : dotnet.System.Numerics.Vector3, rotation : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__Transform_0__2__Vector3_Quaternion(&__thrown, value.get_handle(), rotation.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // System.Numerics.Vector3 TransformNormal(System.Numerics.Vector3, System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)
    public class func TransformNormal(normal : dotnet.System.Numerics.Vector3, matrix : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__TransformNormal_0__2__Vector3_Matrix4x4(&__thrown, normal.get_handle(), matrix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector3 get_One()
// docid: M:System.Numerics.Vector3.get_One
    public class func get_One() throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__get_One_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector3 get_UnitX()
// docid: M:System.Numerics.Vector3.get_UnitX
    public class func get_UnitX() throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__get_UnitX_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector3 get_UnitY()
// docid: M:System.Numerics.Vector3.get_UnitY
    public class func get_UnitY() throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__get_UnitY_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector3 get_UnitZ()
// docid: M:System.Numerics.Vector3.get_UnitZ
    public class func get_UnitZ() throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__get_UnitZ_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector3 get_Zero()
// docid: M:System.Numerics.Vector3.get_Zero
    public class func get_Zero() throws -> dotnet.System.Numerics.Vector3 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector3_Vector3__get_Zero_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector3(hndl : __return);
        }
    }
} // Vector3


// type: System.Numerics.Vector4
// boxed value type
public final class Vector4
    :
    dotnet.System.Object,
    System_IFormattable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Numerics_Vector4_get_type_handle();
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public static var One : dotnet.System.Numerics.Vector4 {
        get {
            return try! get_One();
        }
    }
    public static var UnitW : dotnet.System.Numerics.Vector4 {
        get {
            return try! get_UnitW();
        }
    }
    public static var UnitX : dotnet.System.Numerics.Vector4 {
        get {
            return try! get_UnitX();
        }
    }
    public static var UnitY : dotnet.System.Numerics.Vector4 {
        get {
            return try! get_UnitY();
        }
    }
    public static var UnitZ : dotnet.System.Numerics.Vector4 {
        get {
            return try! get_UnitZ();
        }
    }
    public static var Zero : dotnet.System.Numerics.Vector4 {
        get {
            return try! get_Zero();
        }
    }
    // .ctor(System.Numerics.Vector2, System.Single, System.Single)
// docid: M:System.Numerics.Vector4.#ctor(System.Numerics.Vector2,System.Single,System.Single)
    public init(value : dotnet.System.Numerics.Vector2, z : Swift.Float, w : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Vector4_ctor_0__3__Vector2_f32_f32(&__thrown, value.get_handle(), z, w);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Numerics.Vector3, System.Single)
// docid: M:System.Numerics.Vector4.#ctor(System.Numerics.Vector3,System.Single)
    public init(value : dotnet.System.Numerics.Vector3, w : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Vector4_ctor_0__2__Vector3_f32(&__thrown, value.get_handle(), w);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Single)
// docid: M:System.Numerics.Vector4.#ctor(System.Single)
    public init(value : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Vector4_ctor_0__1__f32(&__thrown, value);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(System.Single, System.Single, System.Single, System.Single)
// docid: M:System.Numerics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)
    public init(x : Swift.Float, y : Swift.Float, z : Swift.Float, w : Swift.Float) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Vector4_ctor_0__4__f32_f32_f32_f32(&__thrown, x, y, z, w);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
// TODO COPE ctor (span) .ctor(System.ReadOnlySpan<System.Single>)
    public override init() {
        let h = System_Numerics_Vector4_implicit_ctor();
            super.init(hndl: h);
    }
    // System.Numerics.Vector4 Abs(System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.Abs(System.Numerics.Vector4)
    public class func Abs(value : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Abs_0__1__Vector4(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Add(System.Numerics.Vector4, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.Add(System.Numerics.Vector4,System.Numerics.Vector4)
    public class func Add(left : dotnet.System.Numerics.Vector4, right : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Add_0__2__Vector4_Vector4(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Clamp(System.Numerics.Vector4, System.Numerics.Vector4, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.Clamp(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)
    public class func Clamp(value1 : dotnet.System.Numerics.Vector4, min : dotnet.System.Numerics.Vector4, max : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Clamp_0__3__Vector4_Vector4_Vector4(&__thrown, value1.get_handle(), min.get_handle(), max.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // void CopyTo(System.Single[])
// docid: M:System.Numerics.Vector4.CopyTo(System.Single[])
    public func CopyTo(array : dotnet.System_Arr<Swift.Float>) throws {
        var __thrown : NullableHandle = nil;
        System_Numerics_Vector4_void__CopyTo_0__1__f32Array(&__thrown, self.get_handle(), array.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(System.Single[], System.Int32)
// docid: M:System.Numerics.Vector4.CopyTo(System.Single[],System.Int32)
    public func CopyTo(array : dotnet.System_Arr<Swift.Float>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Numerics_Vector4_void__CopyTo_0__2__f32Array_i32(&__thrown, self.get_handle(), array.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
// TODO COPE (write_all_methods) (span) void CopyTo(System.Span<System.Single>)
// TODO COPE (write_all_methods) (span) bool TryCopyTo(System.Span<System.Single>)
    // System.Single Distance(System.Numerics.Vector4, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.Distance(System.Numerics.Vector4,System.Numerics.Vector4)
    public class func Distance(value1 : dotnet.System.Numerics.Vector4, value2 : dotnet.System.Numerics.Vector4) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_f32__Distance_0__2__Vector4_Vector4(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single DistanceSquared(System.Numerics.Vector4, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.DistanceSquared(System.Numerics.Vector4,System.Numerics.Vector4)
    public class func DistanceSquared(value1 : dotnet.System.Numerics.Vector4, value2 : dotnet.System.Numerics.Vector4) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_f32__DistanceSquared_0__2__Vector4_Vector4(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Numerics.Vector4 Divide(System.Numerics.Vector4, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Numerics.Vector4)
    public class func Divide(left : dotnet.System.Numerics.Vector4, right : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Divide_0__2__Vector4_Vector4(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Divide(System.Numerics.Vector4, System.Single)
// docid: M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Single)
    public class func Divide(left : dotnet.System.Numerics.Vector4, divisor : Swift.Float) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Divide_0__2__Vector4_f32(&__thrown, left.get_handle(), divisor);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Single Dot(System.Numerics.Vector4, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.Dot(System.Numerics.Vector4,System.Numerics.Vector4)
    public class func Dot(vector1 : dotnet.System.Numerics.Vector4, vector2 : dotnet.System.Numerics.Vector4) throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_f32__Dot_0__2__Vector4_Vector4(&__thrown, vector1.get_handle(), vector2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // bool Equals(System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.Equals(System.Numerics.Vector4)
    public func Equals(other : dotnet.System.Numerics.Vector4) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_bool__Equals_0__1__Vector4(&__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Numerics.Vector4.Equals(System.Object)
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_bool__Equals_0__1__Object(&__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Numerics.Vector4.GetHashCode
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_i32__GetHashCode_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single Length()
// docid: M:System.Numerics.Vector4.Length
    public func Length() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_f32__Length_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Single LengthSquared()
// docid: M:System.Numerics.Vector4.LengthSquared
    public func LengthSquared() throws -> Swift.Float {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_f32__LengthSquared_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // System.Numerics.Vector4 Lerp(System.Numerics.Vector4, System.Numerics.Vector4, System.Single)
// docid: M:System.Numerics.Vector4.Lerp(System.Numerics.Vector4,System.Numerics.Vector4,System.Single)
    public class func Lerp(value1 : dotnet.System.Numerics.Vector4, value2 : dotnet.System.Numerics.Vector4, amount : Swift.Float) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Lerp_0__3__Vector4_Vector4_f32(&__thrown, value1.get_handle(), value2.get_handle(), amount);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Max(System.Numerics.Vector4, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.Max(System.Numerics.Vector4,System.Numerics.Vector4)
    public class func Max(value1 : dotnet.System.Numerics.Vector4, value2 : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Max_0__2__Vector4_Vector4(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Min(System.Numerics.Vector4, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.Min(System.Numerics.Vector4,System.Numerics.Vector4)
    public class func Min(value1 : dotnet.System.Numerics.Vector4, value2 : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Min_0__2__Vector4_Vector4(&__thrown, value1.get_handle(), value2.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Multiply(System.Numerics.Vector4, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Numerics.Vector4)
    public class func Multiply(left : dotnet.System.Numerics.Vector4, right : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Multiply_0__2__Vector4_Vector4(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Multiply(System.Numerics.Vector4, System.Single)
// docid: M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Single)
    public class func Multiply(left : dotnet.System.Numerics.Vector4, right : Swift.Float) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Multiply_0__2__Vector4_f32(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Multiply(System.Single, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.Multiply(System.Single,System.Numerics.Vector4)
    public class func Multiply(left : Swift.Float, right : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Multiply_0__2__f32_Vector4(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Negate(System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.Negate(System.Numerics.Vector4)
    public class func Negate(value : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Negate_0__1__Vector4(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Normalize(System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.Normalize(System.Numerics.Vector4)
    public class func Normalize(vector : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Normalize_0__1__Vector4(&__thrown, vector.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector4 op_Addition(System.Numerics.Vector4, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.op_Addition(System.Numerics.Vector4,System.Numerics.Vector4)
    public class func op_Addition(left : dotnet.System.Numerics.Vector4, right : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__op_Addition_0__2__Vector4_Vector4(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    public static func + (left : dotnet.System.Numerics.Vector4, right : dotnet.System.Numerics.Vector4) -> dotnet.System.Numerics.Vector4
    {
        return try! op_Addition(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector4 op_Division(System.Numerics.Vector4, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Numerics.Vector4)
    public class func op_Division(left : dotnet.System.Numerics.Vector4, right : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__op_Division_0__2__Vector4_Vector4(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    public static func / (left : dotnet.System.Numerics.Vector4, right : dotnet.System.Numerics.Vector4) -> dotnet.System.Numerics.Vector4
    {
        return try! op_Division(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector4 op_Division(System.Numerics.Vector4, System.Single)
// docid: M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Single)
    public class func op_Division(value1 : dotnet.System.Numerics.Vector4, value2 : Swift.Float) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__op_Division_0__2__Vector4_f32(&__thrown, value1.get_handle(), value2);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    public static func / (value1 : dotnet.System.Numerics.Vector4, value2 : Swift.Float) -> dotnet.System.Numerics.Vector4
    {
        return try! op_Division(value1: value1, value2: value2);
    }
    // [IsSpecialName] bool op_Equality(System.Numerics.Vector4, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.op_Equality(System.Numerics.Vector4,System.Numerics.Vector4)
    public class func op_Equality(left : dotnet.System.Numerics.Vector4, right : dotnet.System.Numerics.Vector4) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_bool__op_Equality_0__2__Vector4_Vector4(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    public static func == (left : dotnet.System.Numerics.Vector4, right : dotnet.System.Numerics.Vector4) -> Bool
    {
        return try! op_Equality(left: left, right: right);
    }
    // [IsSpecialName] bool op_Inequality(System.Numerics.Vector4, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.op_Inequality(System.Numerics.Vector4,System.Numerics.Vector4)
    public class func op_Inequality(left : dotnet.System.Numerics.Vector4, right : dotnet.System.Numerics.Vector4) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_bool__op_Inequality_0__2__Vector4_Vector4(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    public static func != (left : dotnet.System.Numerics.Vector4, right : dotnet.System.Numerics.Vector4) -> Bool
    {
        return try! op_Inequality(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector4 op_Multiply(System.Numerics.Vector4, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Numerics.Vector4)
    public class func op_Multiply(left : dotnet.System.Numerics.Vector4, right : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__op_Multiply_0__2__Vector4_Vector4(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    public static func * (left : dotnet.System.Numerics.Vector4, right : dotnet.System.Numerics.Vector4) -> dotnet.System.Numerics.Vector4
    {
        return try! op_Multiply(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector4 op_Multiply(System.Numerics.Vector4, System.Single)
// docid: M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Single)
    public class func op_Multiply(left : dotnet.System.Numerics.Vector4, right : Swift.Float) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__op_Multiply_0__2__Vector4_f32(&__thrown, left.get_handle(), right);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    public static func * (left : dotnet.System.Numerics.Vector4, right : Swift.Float) -> dotnet.System.Numerics.Vector4
    {
        return try! op_Multiply(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector4 op_Multiply(System.Single, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.op_Multiply(System.Single,System.Numerics.Vector4)
    public class func op_Multiply(left : Swift.Float, right : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__op_Multiply_0__2__f32_Vector4(&__thrown, left, right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    public static func * (left : Swift.Float, right : dotnet.System.Numerics.Vector4) -> dotnet.System.Numerics.Vector4
    {
        return try! op_Multiply(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector4 op_Subtraction(System.Numerics.Vector4, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.op_Subtraction(System.Numerics.Vector4,System.Numerics.Vector4)
    public class func op_Subtraction(left : dotnet.System.Numerics.Vector4, right : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__op_Subtraction_0__2__Vector4_Vector4(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    public static func - (left : dotnet.System.Numerics.Vector4, right : dotnet.System.Numerics.Vector4) -> dotnet.System.Numerics.Vector4
    {
        return try! op_Subtraction(left: left, right: right);
    }
    // [IsSpecialName] System.Numerics.Vector4 op_UnaryNegation(System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.op_UnaryNegation(System.Numerics.Vector4)
    public class func op_UnaryNegation(value : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__op_UnaryNegation_0__1__Vector4(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 SquareRoot(System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.SquareRoot(System.Numerics.Vector4)
    public class func SquareRoot(value : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__SquareRoot_0__1__Vector4(&__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Subtract(System.Numerics.Vector4, System.Numerics.Vector4)
// docid: M:System.Numerics.Vector4.Subtract(System.Numerics.Vector4,System.Numerics.Vector4)
    public class func Subtract(left : dotnet.System.Numerics.Vector4, right : dotnet.System.Numerics.Vector4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Subtract_0__2__Vector4_Vector4(&__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Numerics.Vector4.ToString
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_String__ToString_0__0(&__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.String)
// docid: M:System.Numerics.Vector4.ToString(System.String)
    public func ToString(format : Optional<dotnet.System.String>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_String__ToString_0__1__String(&__thrown, self.get_handle(), format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.String, System.IFormatProvider)
// docid: M:System.Numerics.Vector4.ToString(System.String,System.IFormatProvider)
    public func ToString(format : Optional<dotnet.System.String>, formatProvider : Optional<dotnet.System.IFormatProvider>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_String__ToString_0__2__String_IFormatProvider(&__thrown, self.get_handle(), format?.get_handle() ?? nil, formatProvider?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Transform(System.Numerics.Vector2, System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)
    public class func Transform(position : dotnet.System.Numerics.Vector2, matrix : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Transform_0__2__Vector2_Matrix4x4(&__thrown, position.get_handle(), matrix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Transform(System.Numerics.Vector2, System.Numerics.Quaternion)
// docid: M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)
    public class func Transform(value : dotnet.System.Numerics.Vector2, rotation : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Transform_0__2__Vector2_Quaternion(&__thrown, value.get_handle(), rotation.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Transform(System.Numerics.Vector3, System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)
    public class func Transform(position : dotnet.System.Numerics.Vector3, matrix : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Transform_0__2__Vector3_Matrix4x4(&__thrown, position.get_handle(), matrix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Transform(System.Numerics.Vector3, System.Numerics.Quaternion)
// docid: M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)
    public class func Transform(value : dotnet.System.Numerics.Vector3, rotation : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Transform_0__2__Vector3_Quaternion(&__thrown, value.get_handle(), rotation.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Transform(System.Numerics.Vector4, System.Numerics.Matrix4x4)
// docid: M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4)
    public class func Transform(vector : dotnet.System.Numerics.Vector4, matrix : dotnet.System.Numerics.Matrix4x4) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Transform_0__2__Vector4_Matrix4x4(&__thrown, vector.get_handle(), matrix.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // System.Numerics.Vector4 Transform(System.Numerics.Vector4, System.Numerics.Quaternion)
// docid: M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Quaternion)
    public class func Transform(value : dotnet.System.Numerics.Vector4, rotation : dotnet.System.Numerics.Quaternion) throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__Transform_0__2__Vector4_Quaternion(&__thrown, value.get_handle(), rotation.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector4 get_One()
// docid: M:System.Numerics.Vector4.get_One
    public class func get_One() throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__get_One_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector4 get_UnitW()
// docid: M:System.Numerics.Vector4.get_UnitW
    public class func get_UnitW() throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__get_UnitW_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector4 get_UnitX()
// docid: M:System.Numerics.Vector4.get_UnitX
    public class func get_UnitX() throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__get_UnitX_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector4 get_UnitY()
// docid: M:System.Numerics.Vector4.get_UnitY
    public class func get_UnitY() throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__get_UnitY_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector4 get_UnitZ()
// docid: M:System.Numerics.Vector4.get_UnitZ
    public class func get_UnitZ() throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__get_UnitZ_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector4 get_Zero()
// docid: M:System.Numerics.Vector4.get_Zero
    public class func get_Zero() throws -> dotnet.System.Numerics.Vector4 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector4_Vector4__get_Zero_0__0(&__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector4(hndl : __return);
        }
    }
} // Vector4


// type: System.Numerics.Vector`1
// boxed value type
public final class Vector_1<T : SGBridgeGenericValue>
    :
    dotnet.System.Object,
    System_IFormattable
{
    public class override func get_type_handle() -> TypeHandle {
        return System_Numerics_Vector_1_get_type_handle(T.get_type_handle());
    }
    public class override func AsType() -> dotnet.System.Type_ {
        return dotnet.System.Type_(hndl: __copy_handle(get_type_handle()));
    }
    public required init(hndl: NonnullHandle) { super.init(hndl: hndl); }
    public required init(gval: GVal) { super.init(gval: gval); }
    public static var Count : Swift.Int32 {
        get {
            return try! get_Count();
        }
    }
    public static var One : dotnet.System.Numerics.Vector_1<T> {
        get {
            return try! get_One();
        }
    }
    public static var Zero : dotnet.System.Numerics.Vector_1<T> {
        get {
            return try! get_Zero();
        }
    }
// TODO COPE (generic type and parm span): .ctor(System.ReadOnlySpan<System.Byte>)
// TODO COPE (parm span of t): .ctor(System.ReadOnlySpan<T>)
// TODO COPE (parm span of t): .ctor(System.Span<T>)
    // .ctor(T)
// docid: M:System.Numerics.Vector`1.#ctor(`0)
    public init(value : T) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Vector_1_ctor_0__1__T(T.get_type_handle(), &__thrown, value.to_gval());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(T[])
// docid: M:System.Numerics.Vector`1.#ctor(System.Numerics.T[])
    public init(values : dotnet.System_Arr<T>) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Vector_1_ctor_0__1__TArray(T.get_type_handle(), &__thrown, values.get_handle());
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    // .ctor(T[], System.Int32)
// docid: M:System.Numerics.Vector`1.#ctor(System.Numerics.T[],System.Int32)
    public init(values : dotnet.System_Arr<T>, index : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        let h = System_Numerics_Vector_1_ctor_0__2__TArray_i32(T.get_type_handle(), &__thrown, values.get_handle(), index);
        if let __ex = __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            super.init(hndl: h);
        }
    }
    public override init() {
        let h = System_Numerics_Vector_1_implicit_ctor(T.get_type_handle());
            super.init(hndl: h);
    }
// TODO COPE (generic type and parm span): void CopyTo(System.Span<System.Byte>)
// TODO COPE (parm span of t): void CopyTo(System.Span<T>)
    // void CopyTo(T[])
// docid: M:System.Numerics.Vector`1.CopyTo(System.Numerics.T[])
    public func CopyTo(destination : dotnet.System_Arr<T>) throws {
        var __thrown : NullableHandle = nil;
        System_Numerics_Vector_1_void__CopyTo_0__1__TArray(T.get_type_handle(), &__thrown, self.get_handle(), destination.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // void CopyTo(T[], System.Int32)
// docid: M:System.Numerics.Vector`1.CopyTo(System.Numerics.T[],System.Int32)
    public func CopyTo(destination : dotnet.System_Arr<T>, startIndex : Swift.Int32) throws {
        var __thrown : NullableHandle = nil;
        System_Numerics_Vector_1_void__CopyTo_0__2__TArray_i32(T.get_type_handle(), &__thrown, self.get_handle(), destination.get_handle(), startIndex);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return;
        }
    }
    // bool Equals(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})
    public func Equals(other : dotnet.System.Numerics.Vector_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_bool__Equals_0__1__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, self.get_handle(), other.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // bool Equals(System.Object)
// docid: M:System.Numerics.Vector`1.Equals(System.Object)
    public override func Equals(obj : Optional<dotnet.System.Object>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_bool__Equals_0__1__Object(T.get_type_handle(), &__thrown, self.get_handle(), obj?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
    // System.Int32 GetHashCode()
// docid: M:System.Numerics.Vector`1.GetHashCode
    public override func GetHashCode() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_i32__GetHashCode_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Numerics.Vector<T> op_Addition(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
    public class func op_Addition(left : dotnet.System.Numerics.Vector_1<T>, right : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_T___op_Addition_0__2__System_Numerics_Vector_T__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO skip binop generic [IsSpecialName] System.Numerics.Vector<T> op_Addition(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<T> op_BitwiseAnd(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
    public class func op_BitwiseAnd(left : dotnet.System.Numerics.Vector_1<T>, right : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_T___op_BitwiseAnd_0__2__System_Numerics_Vector_T__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO skip binop generic [IsSpecialName] System.Numerics.Vector<T> op_BitwiseAnd(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<T> op_BitwiseOr(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
    public class func op_BitwiseOr(left : dotnet.System.Numerics.Vector_1<T>, right : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_T___op_BitwiseOr_0__2__System_Numerics_Vector_T__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO skip binop generic [IsSpecialName] System.Numerics.Vector<T> op_BitwiseOr(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<T> op_Division(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
    public class func op_Division(left : dotnet.System.Numerics.Vector_1<T>, right : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_T___op_Division_0__2__System_Numerics_Vector_T__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO skip binop generic [IsSpecialName] System.Numerics.Vector<T> op_Division(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
    // [IsSpecialName] bool op_Equality(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
    public class func op_Equality(left : dotnet.System.Numerics.Vector_1<T>, right : dotnet.System.Numerics.Vector_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_bool__op_Equality_0__2__System_Numerics_Vector_T__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO skip binop generic [IsSpecialName] bool op_Equality(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<T> op_ExclusiveOr(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
    public class func op_ExclusiveOr(left : dotnet.System.Numerics.Vector_1<T>, right : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_T___op_ExclusiveOr_0__2__System_Numerics_Vector_T__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO skip binop generic [IsSpecialName] System.Numerics.Vector<T> op_ExclusiveOr(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<System.Byte> op_Explicit(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})
    public class func op_Explicit(value : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<Swift.UInt8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_u8___op_Explicit_0__1__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO conversion generic [IsSpecialName] System.Numerics.Vector<System.Byte> op_Explicit(System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<System.Double> op_Explicit(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})
    public class func op_Explicit(value : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<Swift.Double> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_f64___op_Explicit_0__1__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO conversion generic [IsSpecialName] System.Numerics.Vector<System.Double> op_Explicit(System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<System.Int16> op_Explicit(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})
    public class func op_Explicit(value : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int16> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_i16___op_Explicit_0__1__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO conversion generic [IsSpecialName] System.Numerics.Vector<System.Int16> op_Explicit(System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<System.Int32> op_Explicit(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})
    public class func op_Explicit(value : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_i32___op_Explicit_0__1__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO conversion generic [IsSpecialName] System.Numerics.Vector<System.Int32> op_Explicit(System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<System.Int64> op_Explicit(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})
    public class func op_Explicit(value : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_i64___op_Explicit_0__1__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO conversion generic [IsSpecialName] System.Numerics.Vector<System.Int64> op_Explicit(System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<System.IntPtr> op_Explicit(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})
    public class func op_Explicit(value : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<dotnet.System.IntPtr> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_System_IntPtr___op_Explicit_0__1__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO conversion generic [IsSpecialName] System.Numerics.Vector<System.IntPtr> op_Explicit(System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<System.UIntPtr> op_Explicit(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})
    public class func op_Explicit(value : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<dotnet.System.UIntPtr> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_System_UIntPtr___op_Explicit_0__1__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO conversion generic [IsSpecialName] System.Numerics.Vector<System.UIntPtr> op_Explicit(System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<System.SByte> op_Explicit(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})
    public class func op_Explicit(value : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<Swift.Int8> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_i8___op_Explicit_0__1__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO conversion generic [IsSpecialName] System.Numerics.Vector<System.SByte> op_Explicit(System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<System.Single> op_Explicit(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})
    public class func op_Explicit(value : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<Swift.Float> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_f32___op_Explicit_0__1__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO conversion generic [IsSpecialName] System.Numerics.Vector<System.Single> op_Explicit(System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<System.UInt16> op_Explicit(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})
    public class func op_Explicit(value : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<Swift.UInt16> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_u16___op_Explicit_0__1__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO conversion generic [IsSpecialName] System.Numerics.Vector<System.UInt16> op_Explicit(System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<System.UInt32> op_Explicit(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})
    public class func op_Explicit(value : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<Swift.UInt32> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_u32___op_Explicit_0__1__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO conversion generic [IsSpecialName] System.Numerics.Vector<System.UInt32> op_Explicit(System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<System.UInt64> op_Explicit(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})
    public class func op_Explicit(value : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<Swift.UInt64> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_u64___op_Explicit_0__1__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO conversion generic [IsSpecialName] System.Numerics.Vector<System.UInt64> op_Explicit(System.Numerics.Vector<T>)
    // [IsSpecialName] bool op_Inequality(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
    public class func op_Inequality(left : dotnet.System.Numerics.Vector_1<T>, right : dotnet.System.Numerics.Vector_1<T>) throws -> Bool {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_bool__op_Inequality_0__2__System_Numerics_Vector_T__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return (__return) != 0;
        }
    }
// TODO skip binop generic [IsSpecialName] bool op_Inequality(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<T> op_Multiply(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
    public class func op_Multiply(left : dotnet.System.Numerics.Vector_1<T>, right : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_T___op_Multiply_0__2__System_Numerics_Vector_T__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO skip binop generic [IsSpecialName] System.Numerics.Vector<T> op_Multiply(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<T> op_Multiply(System.Numerics.Vector<T>, T)
// docid: M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)
    public class func op_Multiply(value : dotnet.System.Numerics.Vector_1<T>, factor : T) throws -> dotnet.System.Numerics.Vector_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_T___op_Multiply_0__2__System_Numerics_Vector_T__T(T.get_type_handle(), &__thrown, value.get_handle(), factor.to_gval());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO skip binop generic [IsSpecialName] System.Numerics.Vector<T> op_Multiply(System.Numerics.Vector<T>, T)
    // [IsSpecialName] System.Numerics.Vector<T> op_Multiply(T, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})
    public class func op_Multiply(factor : T, value : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_T___op_Multiply_0__2__T_System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, factor.to_gval(), value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO skip binop generic [IsSpecialName] System.Numerics.Vector<T> op_Multiply(T, System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<T> op_OnesComplement(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})
    public class func op_OnesComplement(value : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_T___op_OnesComplement_0__1__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector<T> op_Subtraction(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
    public class func op_Subtraction(left : dotnet.System.Numerics.Vector_1<T>, right : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_T___op_Subtraction_0__2__System_Numerics_Vector_T__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, left.get_handle(), right.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
// TODO skip binop generic [IsSpecialName] System.Numerics.Vector<T> op_Subtraction(System.Numerics.Vector<T>, System.Numerics.Vector<T>)
    // [IsSpecialName] System.Numerics.Vector<T> op_UnaryNegation(System.Numerics.Vector<T>)
// docid: M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})
    public class func op_UnaryNegation(value : dotnet.System.Numerics.Vector_1<T>) throws -> dotnet.System.Numerics.Vector_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_T___op_UnaryNegation_0__1__System_Numerics_Vector_T_(T.get_type_handle(), &__thrown, value.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // System.String ToString()
// docid: M:System.Numerics.Vector`1.ToString
    public override func ToString() throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_String__ToString_0__0(T.get_type_handle(), &__thrown, self.get_handle());
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.String)
// docid: M:System.Numerics.Vector`1.ToString(System.String)
    public func ToString(format : Optional<dotnet.System.String>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_String__ToString_0__1__String(T.get_type_handle(), &__thrown, self.get_handle(), format?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
    // System.String ToString(System.String, System.IFormatProvider)
// docid: M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)
    public func ToString(format : Optional<dotnet.System.String>, formatProvider : Optional<dotnet.System.IFormatProvider>) throws -> dotnet.System.String {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_String__ToString_0__2__String_IFormatProvider(T.get_type_handle(), &__thrown, self.get_handle(), format?.get_handle() ?? nil, formatProvider?.get_handle() ?? nil);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.String(hndl : __return);
        }
    }
// TODO COPE (generic type and parm span): bool TryCopyTo(System.Span<System.Byte>)
// TODO COPE (parm span of t): bool TryCopyTo(System.Span<T>)
    // [IsSpecialName] System.Int32 get_Count()
// docid: M:System.Numerics.Vector`1.get_Count
    public class func get_Count() throws -> Swift.Int32 {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_i32__get_Count_0__0(T.get_type_handle(), &__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return __return;
        }
    }
    // [IsSpecialName] System.Numerics.Vector<T> get_One()
// docid: M:System.Numerics.Vector`1.get_One
    public class func get_One() throws -> dotnet.System.Numerics.Vector_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_T___get_One_0__0(T.get_type_handle(), &__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // [IsSpecialName] System.Numerics.Vector<T> get_Zero()
// docid: M:System.Numerics.Vector`1.get_Zero
    public class func get_Zero() throws -> dotnet.System.Numerics.Vector_1<T> {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_System_Numerics_Vector_T___get_Zero_0__0(T.get_type_handle(), &__thrown);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
        return dotnet.System.Numerics.Vector_1(hndl : __return);
        }
    }
    // [IsSpecialName] T get_Item(System.Int32)
// docid: M:System.Numerics.Vector`1.get_Item(System.Int32)
    public func get_Item(index : Swift.Int32) throws -> T {
        var __thrown : NullableHandle = nil;
        let __return = System_Numerics_Vector_1_T__get_Item_0__1__i32(T.get_type_handle(), &__thrown, self.get_handle(), index);
        if let __ex =  __thrown {
            throw dotnet.System.Exception(hndl: __ex);
        } else {
            return T(gval: __return);
        }
    }
} // Vector_1


}


// EXTENSION METHOD System.Numerics.Vector<TTo> As<TFrom, TTo>(System.Numerics.Vector<TFrom>)
// TODO COPE extension method (unused generic param) System.Numerics.Vector<TTo> As<TFrom, TTo>(System.Numerics.Vector<TFrom>)

